GatherGlobalResults
════════════════════════════════════════════════════════════════════════

const color = #F3C


def draw_arc(pos, radius, start, stop, color):
    const N = 10
    let prev = pos + angle_to_xy(start) * radius
    for i < N:
        const θ = lerp(start, stop, i / (N - 1),)
        const curr = pos + radius * angle_to_xy(θ)
        draw_line(prev, curr, color)
        prev = curr


def draw_globe(pos, radius):
    draw_disk(pos, radius, ∅, color)
    
    const parallels = 7
    for 0 < p < parallels:
        const θ = 180° (p + 1) / (parallels + 1) 
        draw_arc(pos, xy(1, cos θ) * radius, 12°, 168°, color)
    
    const meridians = 15
    for m < meridians:
        const ϕ = loop(360° * m / meridians + 1° game_frames, 360°)
        if ϕ < 180°:
            draw_arc(pos, xy(cos ϕ, 1) * radius, 90°, 270°, color)


enter
────────────────────────────────────────────────────────────────────────
remove_all(competitor_array)

player_competitor = make_player_competitor()
push(competitor_array, player_competitor)

share_results_with_network(player_competitor)

end_time = next_global_game_utc_start_time() - GLOBAL_INTERMISSION_TIME

if DEBUG_INTERMISSION:
    end_time = utc_time


frame
────────────────────────────────────────────────────────────────────────
if mode_frames == (if DEBUG_INTERMISSION then 0 else 60):
    // Make some bots to fill out the competitor list if offline or
    // there are too few players. Do this after almost a second so that
    // other players could come in first
    insert_bots(competitor_array, clamp(⌊4 noise(1, local_time().month + local_time().day + local_time().hour)⌋ + random_integer(6, 14), 3, 8))

const start_time = end_time - GATHER_TIME_SECONDS
const τ = min((utc_time - start_time) / GATHER_TIME_SECONDS, 100%)

update_network()

set_background(GLOBAL_BACKGROUND_COLOR)

draw_text({
    text: "Gathering Global Scores…",
    font: score_font,
    color: color,
    y_align: "center",
    pos: ½ SCREEN_SIZE})

const y = ½ SCREEN_SIZE.y + 20
const w = 200
draw_corner_rect(xy(½ SCREEN_SIZE.x - ½ w, y), xy(w * τ, 10), color)
draw_corner_rect(xy(½ SCREEN_SIZE.x - ½ w, y), xy(w, 10), ∅, color)

draw_globe(xy(½ SCREEN_SIZE.x, ½ SCREEN_SIZE.y - 40), 20)

// Make avatars pop up on the bottom of the screen as if they were
// being discovered over the network
const row_size = ⌊w / 20⌋
const N = size(competitor_array)
for i < ⌊max(N, 10) τ⌋:
    if i < N:
        const competitor = competitor_array[i]
        const sprite = competitor.avatar.sprite
        //else avatar_sprite[4][i mod avatar_sprite.size.x]
        const pos = 20 xy(i mod row_size, -⌊i / row_size⌋) + xy(½ SCREEN_SIZE.x - ½ w + 5, SCREEN_SIZE.y - 30)       
        if competitor_is_friend(competitor):
            // Background
            draw_rect(pos - xy(0, 6), xy(20, 34), competitor.avatar.color)
            // Heart
            draw_text({pos: pos - xy(0, 14), text: "♥", color: #FFF, shadow: #000, font: leaderboard_font})
            // Drop shadow
            draw_sprite({sprite: sprite, pos: pos + xy(0, 1), override_color: #000})
            
        draw_sprite(sprite, pos)

if utc_time ≥ end_time:
    set_mode(GlobalIntermission) because "Timer"
    
    
leave
────────────────────────────────────────────────────────────────────────
disconnect_from_network()
competitor_analyze(competitor_array)

todo("Trim down when there are very many competitors, keeping the top 2, the bottom 3, and 3 around the player")
