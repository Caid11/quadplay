/* List of words found by a `player`. */
def make_history():
    return {
        // Each entry is {text, word, tiles, points, color, emphasize_frame, pos}.
        // `pos` is computed as a side effect of draw history
        // `word` is Q-encoded, `text` may contain arbitrary characters
        list: [],
        
        // Auto computed and overriden on new word spawn or resize,
        // but can be manually affected by the player
        scroll: 0,

        // Scroll computation resets when screen size changes.
        // This was the size it was computed for.
        scroll_screen_size: xy(0, 0),
        
        // Scroll computation resets when the list size changes.
        // This was the size it was computed for.
        scroll_history_size: 0,
        
        // Due to finger on history
        drag_start: {
            // Position at which the current drag started,
            // ∅ if not in a drag
            pos: ∅,
            
            // history.scroll when the drag started
            scroll: ∅
        }
    }



/* Mutates `pos`, returns `max_width`. Called from `history_update()`. */
def history_draw(history, pos, max_height):
    todo("Visualize history scroll state on Play view")
    todo("Vertical scroll history")
    
    const start_y = pos.y
    
    let max_width = 0
    for entry at e in history.list:
        // Wrap into multiple columns if this element will
        // go off the page. Do this here so that we never
        // reset right before the end
        if pos.y > max_height - 8:
            pos.y = start_y
            pos.x += max_width + HISTORY_COLUMN_SEPARATION
            max_width = 0
            
        const emphasize = max(0, entry.emphasize_frame - game_frames)
        
        const wiggle = xy(oscillate(18% emphasize, -1, +1) - sign(emphasize), 0)
    
        // Save for animation later
        entry.pos = transform_ws_to_ss(pos)
        
        // Hide while animation is playing for this word, but
        // draw invisibly so we get bounds
        const show = game_frames > entry.reveal_frame
        const color = entry.color
        const outline = if emphasize then #FFF else entry.outline
        
        let text = entry.text
        
        // Emphasize rare values when on the Intermission mode.
        // For other modes (e.g., Play), `rare` will never be true.
        if entry.rare: text += "★"
        
        const flash = entry.rare and (game_frames + 500 - ¼ pos.y) mod 360 > 345
        
        const bounds = draw_text({
            // Bounce if emphasized
            pos: pos + wiggle,
            font: if emphasize then history_emphasis_font else history_font,
            x_align: "left",
            y_align: "top",
            color: if show then (if flash then #fff else color) else #0000,
            outline: if show then outline else #0000,
            z: emphasize,
            text: text})

        // Track if this makes the column larger
        max_width = max(max_width, text_width(history_font, text))
        pos.y += history_font.line_height + 1
        
    return max_width
    


/* Draw the word history and manage touch dragging */
def history_update(history, list_rect)
& with drag_start, scroll_screen_size, scroll_history_size in history
& preserving_transform:
    
    set_clip(list_rect)
    
    if not equivalent(SCREEN_SIZE, scroll_screen_size):
        // Reset on window change
        history.scroll = 0

    const pos = xy(3, 2)
    let max_width
    
    preserving_transform:
        set_transform(list_rect.corner - xy(history.scroll, 0))
        max_width = history_draw(history, pos, list_rect.size.y)

    const overflow = pos.x + max_width - list_rect.size.x + 1

    if not drag_start.pos:
        // Start drag
        if touch.pressed_a and overlaps(touch.xy, list_rect):
            drag_start.pos = xy(touch.xy)
            drag_start.scroll = history.scroll
    else if touch.a:
        // Continue drag
        history.scroll = clamp(drag_start.scroll + drag_start.pos.x - touch.x, 0, overflow)
    else:
        // End drag
        drag_start.pos = ∅
    
    if not drag_start.pos and (not equivalent(SCREEN_SIZE, scroll_screen_size) or scroll_history_size ≠ size(history.list)):
        scroll_screen_size = xy(SCREEN_SIZE)
        scroll_history_size = size(history.list)
        // Set the scroll to whatever it needs to be to keep the 
        // most recent words on screen
        history.scroll = max(history.scroll, overflow)
    
    if overflow < 0:
        history.scroll = 0
        
        

        