
/* Generate a stable set of bots with a range of abilities, and 
   produce their scores and word lists for the current `player.board`. */
def insert_bots(competitor_array, target_count, max_bots):
    
    todo("Move out to constants")    
    const avatar_set = [
{
name: "THX",
sprite: avatar_sprite[13][4],
base_ability: 24%,
short_word_preference: 16%,
first_hour: 10,
last_hour: 12,
},
{
// Later THX
name: "THX",
sprite: avatar_sprite[13][4],
base_ability: 24%,
short_word_preference: 16%,
first_hour: 14,
last_hour: 20,
},
{
name: "o_o",
sprite: avatar_sprite[20][14],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 17,
last_hour: 7
},
{
name: "NT",
sprite: avatar_sprite[17][6],
base_ability: 8%,
short_word_preference: 67%,
first_hour: 8,
last_hour: 12
},
{
name: "AMS",
sprite: avatar_sprite[37][14],
base_ability: 37%,
short_word_preference: 32%,
first_hour: 22,
last_hour: 3
},
{
name: "VIL",
sprite: avatar_sprite[25][20],
base_ability: 40%,
short_word_preference: 20%,
first_hour: 4,
last_hour: 10
},
{
name: "I♥U",
sprite: avatar_sprite[3][20],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 19,
last_hour: 6
},
{
name: "jen",
sprite: avatar_sprite[39][8],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 7,
last_hour: 11
},
{
name: "411",
sprite: avatar_sprite[24][18],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 21,
last_hour: 10
},
{
name: "RLL",
sprite: avatar_sprite[33][24],
base_ability: 21%,
short_word_preference: 21%,
first_hour: 15,
last_hour: 2
},
{
name: "CJ",
sprite: avatar_sprite[39][24],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 15,
last_hour: 0
},
{
name: "Bob",
sprite: avatar_sprite[28][26],
base_ability: 10%,
short_word_preference: 62%,
first_hour: 0,
last_hour: 7
},
{
name: "TTT",
sprite: avatar_sprite[39][16],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 2,
last_hour: 9
},
{
name: "HCD",
sprite: avatar_sprite[39][6],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 12,
last_hour: 20
},
{
name: "GEW",
sprite: avatar_sprite[39][2],
base_ability: 30%,
short_word_preference: 45%,
first_hour: 11,
last_hour: 15
},
{
name: "jr",
sprite: avatar_sprite[9][18],
base_ability: 3%,
short_word_preference: 89%,
first_hour: 18,
last_hour: 6
},
{
name: "FLA",
sprite: avatar_sprite[9][16],
base_ability: 2%,
short_word_preference: 92%,
first_hour: 1,
last_hour: 7
},
{
name: "Lou",
sprite: avatar_sprite[8][18],
base_ability: 7%,
short_word_preference: 71%,
first_hour: 6,
last_hour: 12
},
{
name: "RON",
sprite: avatar_sprite[8][16],
base_ability: 3%,
short_word_preference: 86%,
first_hour: 4,
last_hour: 18
},
{
name: "CPU",
sprite: avatar_sprite[21][2],
base_ability: 8%,
short_word_preference: 92%,
first_hour: 12,
last_hour: 1
}]

    // Make results for the board stable so that all human players see the
    // bots doing the same things
    const match_rng = make_random(player.board.seed)
    target_count = min(target_count, size(competitor_array) + max_bots)
    
    // Used for finding legal substrings
    const word_table = {}
    for word in player.board.word_list:
        if dictionary[word]:
            word_table[word] = 1
    
    // Used for determining which players are active
    const hour = utc_time().hour
    const minute = utc_time().minute
    
    // Shift everybody's ability by this amount
    const match_shift = match_rng(-10%, 0%)
    
    def maybe_add_bot_competitor(avatar, id):
        assert(avatar and avatar.sprite)
        
        const competitor = {
            avatar: avatar,
            score: 0,
            free_list: []}
    
        competitor.avatar.id = id
    
        // Bots face left
        competitor.avatar.sprite = competitor.avatar.sprite.x_flipped
        competitor.avatar.color = avatar_compute_color(competitor.avatar.sprite)
        competitor.avatar.level = clamp(⌈140 competitor.avatar.base_ability^(1.3)⌉, 1, 40)
        
        // Make stable how good this player is overall, and then add noise per game.
        // Apply that as a fraction of all words possible
        const base_ability = competitor.avatar.base_ability
        const find_percentage = min(28%, match_rng(3%^⅓, 30%^⅓)³ + base_ability)
        const words_found = clamp(⌊size(player.board.word_list) * find_percentage⌋, 5, 55)
        const short_word_preference = competitor.avatar.short_word_preference
        
        // Is this particular competitor available right now?
        if competitor.avatar.last_hour > competitor.avatar.first_hour:
            if hour < competitor.avatar.first_hour or hour > competitor.avatar.last_hour: 
                return
        else if hour > competitor.avatar.last_hour and hour < competitor.avatar.first_hour:
            // Wraparound hours case
            return
        
        // Make a word list for this competitor and score it.
        // Higher chance of discovering shorter words via rejection sampling.
        
        const word_set = {}
        def maybe_add_word(word):
            assert(word)
            // Accept words that this competitor hasn't found with
            // decreasing probability as the word gets longer than 3 letters.
            // Players with higher base percentages also are better at long words.
            if (not sensitive[lowercase(word)] and
                not word_set[word] and
                match_rng() ≤ (2.8 base_ability + 23%) / pow(max(size(word) - 2, 1), 0.4 + 3 short_word_preference)):
                // Ensure that if a word is found, all substrings are found
                for 3 ≤ s ≤ size(word):
                    const w = slice(word, 0, s)
                    if word_table[w]:
                        word_set[w] = 1
        
        // Special case for Moo, who always finds *all* cow-related words
        if competitor.avatar.id == MOO_ID:
            for word in MOOCABULARY:
                if not word_set[word] and contains(player.board.word_list, word):
                    word_set[word] = 1
                    
        let tries = 0        
        // Special case for caf, who sometimes finds a great word, finds all
        // three-letter cow words, and with a low probability finds a terrible word
        if competitor.avatar.id == CAF_ID:
            caf_ai(word_set, player.board.word_list, match_rng)
        else:
            // Pick up a bunch of cheap words first
            const short_word_length = if competitor.avatar.id == MOO_ID then 3 else 4
            while size(word_set) < clamp(2 short_word_preference, 10%, 90%) * words_found and tries < 2 words_found:
                ++tries
                const word = random_value(player.board.word_list, match_rng)
                if size(word) ≤ short_word_length:
                    maybe_add_word(word)
    
        // Moo cannot find non-cow words greater than 4 letters    
        if competitor.avatar.id ≠ MOO_ID and competitor.avatar.id ≠ CAF_ID:
            tries = 0
            while size(word_set) < words_found and tries < 2 words_found:
                ++tries
                maybe_add_word(random_value(player.board.word_list, match_rng))
    
        competitor.word_list = keys(word_set)
                
        sort(competitor.word_list, size_comparator, true)
        sort(competitor.free_list, size_comparator, true)
        
        for word at i in competitor.word_list:
            competitor.score += score_word(word)

        push(competitor_array, competitor)
        
    // Moo is a special case
    // ALWAYS insert Moo if the player has the See Moo ability, otherwise insert Moo if
    // it is an odd 10 minute interval right now. Process Moo after other bots
    // so that players who don't see Moo don't have their other results affected
    if player.has_ability["See Moo"] or (⌊minute / 10⌋ mod 2):
        maybe_add_bot_competitor({
                name: "Moo",
                sprite: avatar_sprite[34][22],
                base_ability: 0.1,
                short_word_preference: 0.80,
                first_hour: 0,
                last_hour: 22},
            MOO_ID)
    
    // Process caf *after* Moo. Everyone who can see caf can also see Moo, so
    // this keeps it deterministic
    if DEBUG.CAF or (player.has_ability["See caf"] and ((hour + ⌊minute / 7⌋) mod 2 == 0)) or DEBUG.CAF:
        maybe_add_bot_competitor({
                name: "caf",
                sprite: avatar_sprite[33][22],
                base_ability: 0.0,
                short_word_preference: 0.80,
                first_hour: 0,
                last_hour: 23},
            CAF_ID)
    
    let c = 0
    while size(competitor_array) < target_count and avatar_set[c]:
        maybe_add_bot_competitor(avatar_set[c], "BOT_" + c)
        ++c



/* Special case AI for the caf bot. `word_list` is the input,
   `word_set` is the output found words */
def caf_ai(word_set, word_list, rng):
    if rng() < 10% or DEBUG.CAF:     
        const word = word_list[random_integer(max(0, size(word_list) - 6), size(word_list) - 1, rng)]
        if word and not word_set[word]:
            // Find this word
            word_set[word] = 1
            
    // Look for short cow words
    for word in MOOCABULARY:
        if size(word) ≤ 3 and not word_set[word] and contains(word_list, word):
            word_set[word] = 1

    // Find all words with "CAF" as a substring
    for word in player.board.word_list:
        if contains(word, "CAF") and not word_set[word]:
            word_set[word] = 1
            
    if rng() < 50% and size(word_set) == 0 and size(word_list):
        // Try to find another word so that caf doesn't complain too often
        if not word_set[word_list[0]]:
            word_set[word_list[0]] = 1
