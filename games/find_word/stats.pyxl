/* See `xp_to_level()`. Chosen to make Level 20 = 100k XP */
const LEVEL_EXPONENT = 0.65

/* See `xp_to_level()` */
const LEVEL_DIVISOR  = 1000

todo("** For partial games, give XP but adjust no other stats")

const XP_VALUE = {
    // Per point
    point: 0.2,
    
    // Per day
    //day: 100,
    
    // For each badge
    //badge: 50
}



/* A `stats` object contains `{lifetime: stats_entry, <date>: stats_entry, …, word_list: []}` */
def make_empty_stats_entry():
    return {
        longest_text: "", 
        best_word_text: "", 
        best_word_points: 0,
        best_score: 0,
        most_words: 0,
        words: 0,
        points: 0,
        matches: 0,
        xp: 0}
        

def xp_to_level(xp):
    assert(xp ≠ ∅ and not is_nan(xp))
    return floor((xp / LEVEL_DIVISOR + ½)^LEVEL_EXPONENT + 1)



/* XP needed to reach this level */
def level_to_xp(level):
    if level ≤ 0:
        return 0
    else:
        return floor((level - 1)^(1 / LEVEL_EXPONENT) * LEVEL_DIVISOR, ½ LEVEL_DIVISOR)


/* Assumes the input is a list of q-encoded, all-caps words. 
   Returns a string packing them into a form that serializes
   efficiently.
   
   quadplay limits the length of serialized save_local values, so
   compress by
   
   - Using a single string, eliminating an extra comma and quote from each word
   - Using suffix encoding for variants with trivial plurals:
       - § = + ES
       - $ = + S
   */
def compress_word_list(array):
    def length(a, b):
        return size(a) - size(b)
    
    const PRESENT = 2
    const ALREADY_SAVED = 1
    
    
    // Start with words sorted from longest to shortest
    // (so we see prefixes first), and then mark all present
    array = sorted(array, length, true)

    // Maps each word to PRESENT or ALREADY_SAVED
    let set = {}
    for i < size(array):
        set[array[i]] = PRESENT
        
    // Encode the words of array. Process in order from longest
    // to shortest so that suffix encodings work
    const dest = []    
    
    for i < size(array):
        const text = array[i]
        if set[text] ≠ ALREADY_SAVED:
            // Technically unnecessary; we won't return to this word
            set[text] = ALREADY_SAVED
            
            // Because of the way that the game scores words,
            // it is actually impossible to have found the suffix
            // plural without the singular. However, this logic is good
            // for cases where the word ending in ES or S is not actually
            // plural as well as for later generalizing to other suffixes
            // and prefixes.
            const strip2 = slice(text, 0, size(text) - 2)
            const strip1 = slice(text, 0, size(text) - 1)
            if ends_with(text, "ES") and set[strip2] == PRESENT:
                set[strip2] = ALREADY_SAVED
                push(dest, strip2 + "§")
            else if ends_with(text, "S") and set[strip1] == PRESENT:
                set[strip1] = ALREADY_SAVED
                push(dest, strip1 + "$")
            else:
                push(dest, text)
    
    // Allow array and set to be garbage collected before we compute a giant
    // string.
    set = ∅
    array = ∅    
        
    // Perform a single join at the end instead of string concatenation as we go
    // so that native code can do this more efficiently
    return join(dest, ",")
    
    

def decompress_word_list(string):
    const result = []
    const array = split(string, ",")
    for i < size(array):
        let text = array[i]
        if ends_with(text, "$"):
            text = slice(text, 0, size(text) - 1)
            push(result, text + "S")
        else if ends_with(text, "§"):
            text = slice(text, 0, size(text) - 1)
            push(result, text + "ES")
            
        push(result, text)
        
    return result
    

/*
for 1 ≤ level ≤  10:
    const xp = level_to_xp(level)
    debug_print(level, xp, xp_to_level(xp + 0))*/



def stats_save(stats):
    const s = deep_clone(stats)
    for day in s:
        day.xp = encode_xp(day.xp)
        
    s.word_list = compress_word_list(s.word_list)
    save_local("stats", s)
    
    

/* Returns a new stats object loaded from storage. */
def stats_load():    
    const stats = load_local("stats") default {lifetime: make_empty_stats_entry()}

    // Decompress the word list    
    if stats.word_list:
        if type(stats.word_list) == "array":
            // Legacy, already an array
        else:
            // Modern, decompress
            stats.word_list = decompress_word_list(stats.word_list)
    else:
        // Legacy, add
        stats.word_list = []

    // Clean up and decode all entries
    for day at date in stats:
        if date ≠ "word_list":
            const day = stats[date]
            day.xp = decode_xp(day.xp)
            
            // Upgrade legacy formats
            if day.longest ≠ ∅:
                remove_key(day, "longest")
            if day.longest_text == ∅:
                day.longest_text = ""
                
    // Everything is decoded now. Iterate again,
    stats_merge_previous_days(stats)
    
    return stats



/* Roll up every day other than today into the lifetime stats, and
   then delete those days.
*/
def stats_merge_previous_days(stats):
    const today_date = today_date_string()                
    const lifetime = stats.lifetime
    
    if not stats[today_date]:
        stats[today_date] = make_empty_stats_entry()
        
        
    for date in keys(stats):
        // Skip the elements we are not modifying and the word_list, which is the only
        // non-date top-level member
        if date == "lifetime" or date == today_date or date == "word_list": continue
    
        const day = stats[date]
                    
        if size(day.longest_text) > size(lifetime.longest_text):
            lifetime.longest_text = day.longest_text
            
        if day.best_word_points > lifetime.best_word_points:
            lifetime.best_word_points = day.best_word_points
            lifetime.best_word_text = day.best_word_points

        lifetime.most_words = max(lifetime.most_words, day.most_words)
        lifetime.best_score = max(lifetime.best_score, day.best_score)
        lifetime.words += day.words
        lifetime.points += day.points
        lifetime.matches += day.matches
        lifetime.xp += day.xp
        remove_key(stats, date)
                                
        return stats
    
    
    
/* Used for lightly protecting the saved value from casual abuse via a checksum */
def encode_xp(xp):
    let h = "" + hash(xp)
    h = slice(h, 2)
    return h + "." + xp
        
        
        
/* Used for lightly protecting the saved value from casual abuse via a checksum */
def decode_xp(str):
    if type(str) ≠ "string":
        // Was not properly encoded
        return 0
        
    const xp = parse(split(str, ".")[1])
    if encode_xp(xp) == str:
        return xp
    else:
        // Was not properly encoded
        return 0
    


def today_date_string():
    const date = local_time()
    return "" + date.year + "-" + (date.month + 1) + "-" + date.day



/* 
    Update the player's stats and level given the results in 
    competitor from a global match. Do not save.
*/
def stats_update(stats, competitor, joined_late):

    // We may have passed midnight, so roll up any previous days
    // if needed before updating today's entry
    stats_merge_previous_days(stats)

    assert(stats)
    assert(stats.word_list ≠ ∅)
    
    const entry = stats[today_date_string()]
    
    if size(competitor.longest_text) > size(entry.longest_text):
        entry.longest_text = competitor.longest_text
        
    if competitor.best_word_points > entry.best_word_points:
        entry.best_word_points = competitor.best_word_points
        entry.best_word_text = competitor.best_word_text
    
    if competitor.score > entry.best_score:
        entry.best_score = competitor.score
    
    const N = size(competitor.word_list)
    if N > entry.most_words:
        entry.most_words = N
    
    if not joined_late:
        entry.words += N
        entry.points += competitor.score
        ++entry.matches
    
    entry.xp += ⌈competitor.score * XP_VALUE.point⌉

    // Accumulate the words found by this player
    const word_set = {}
    for word in stats.word_list:
        word_set[word] = 1
    
    for word in competitor.word_list:
        if not word_set[word]:
            push(stats.word_list, word)
    
    sort(stats.word_list)

    