Intermission
════════════════════════════════════════════════════════════════════════

todo("Multiplayer: Reward best word, longest word, most words, highest score")

let end_time
let unfound_word
let unfound_word_array

def points_order(A, B):
    return B.points - A.points
    
    
def word_comparator(entry, word):
    return entry.word == word
        
    
def length_comparator(A, B):
    return size(A) - size(B)


def swap(array, i, j):
    const temp = array[i]
    array[i] = array[j]
    array[j] = temp


enter
────────────────────────────────────────────────────────────────────────
set_background(#333)
board_deselect_all(player.board, player)
//debug_print(player.board.word_list)
sort(player.history.list, points_order)

if game_type == GLOBAL:
    end_time = next_global_game_utc_start_time()


unfound_word_array = []
for word in player.board.word_list:
    if not sensitive[lowercase(word)] and not contains(player.history.list, word, word_comparator):
        push(unfound_word_array, word)


// Sort from shortest to longest to emphasize impressive words
sort(unfound_word_array, length_comparator)

// Now swap some of the other words towards the back so that
// the player also feels like they could have gotten these
if size(unfound_word_array) > 10:
    for i < 3:
        swap(unfound_word_array, random_integer(0, size(unfound_word_array) - 8), size(unfound_word_array) - 1 - random_integer(1, 6))

board_deselect_all(player.board)


frame
────────────────────────────────────────────────────────────────────────

if mode_frames mod 420 == 100:
    // Choose the next unfound word
    unfound_word = pop(unfound_word_array)
    
    // Select this word
    board_deselect_all(player.board)
    player.board.selection = board_find_unencoded_word(player.board, unfound_word)
    player.board.selection_color = #E1B
    //const points = score_word(q_encode(unfound_word))
    
    // Select these letters
    for index in player.board.selection:
        player.board.tile[index.x][index.y].selected = mode_frames
    
    
const left = if landscape() then ⅓ else ¼
const right = 100% - left

// Score
draw_text({
    font: score_font,
    text: format_number(player.score, "commas") + " pts",
    outline: #000,
    shadow: #000,
    pos: xy(left * SCREEN_SIZE.x, 18),
    color: #FFF})

draw_text({
    font: history_font,
    text: "" + size(player.history.list) + "/" + player.board.word_count + " words found",
    pos: xy(left * SCREEN_SIZE.x, 32),
    shadow: #000,
    color: #FFF})

if unfound_word:
    draw_text({
        font: history_font,
        text: "Try \"" + unfound_word + "\"",
        pos: xy(left *  SCREEN_SIZE.x, 42),
        shadow: #000,
        color: #FFF})
    
// Board
for y < ROWS:
    for x < COLS:
        const tile = player.board.tile[x][y]
        tile.pos = xy(right * SCREEN_SIZE.x, 30) + 12 xy(x - 1.5, y - 1.5)
        
        draw_disk(tile.pos, 5, if tile.selected then player.board.selection_color else #FFF)
        
        draw_text({
            pos: tile.pos,
            font: history_font,
            color: if tile.selected then #FFF else #000,
            text: if tile.letter == "Q" then "Qu" else tile.letter})

if size(player.board.selection) > 0:
    // Draw connectors
    for 1 ≤ i < size(player.board.selection):
        const prev = player.board.selection[i - 1]
        const curr = player.board.selection[i]
        draw_line(player.board.tile[prev.x][prev.y].pos, player.board.tile[curr.x][curr.y].pos, player.board.selection_color, -1, 2)

// History
history_draw(player.history, xy(4, 60), SCREEN_SIZE.y - 30)

if game_type == SOLO:

    const pos = xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 10)
    const size = xy(150, 17)
    draw_rect(pos - xy(0, 1), size, #0F0, #FFF)
    draw_text({
        font: score_font,
        text: "Start New Game",
        outline: #090,
        pos: pos,
        color: #FFF})
        
    if (any_button_press(gamepad_array[0]) or (touch.aa and overlaps(touch.xy, {pos: pos, size: size}))) and mode_frames > 15:
        set_mode(GenerateBoard) because "Button press"
        
else:
    // Countdown
    const time_left = max(end_time - utc_time, 0)
    const timer_pos = xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 10)
    const α = 100% - time_left / (if game_type == SOLO then SOLO_INTERMISSION_TIME else GLOBAL_INTERMISSION_TIME)
    
    draw_corner_rect(xy(0, timer_pos.y - 10), xy(SCREEN_SIZE.x, 19), #000, #FFF)
    draw_corner_rect(xy(1, timer_pos.y - 9), xy(α * (SCREEN_SIZE.x - 2), 17), #0F0)
    
    draw_text({
        font: score_font,
        text: format_number(time_left, "timer") + " until next game…",
        outline: #090,
        pos: timer_pos,
        color: #FFF})
    
    if utc_time ≥ end_time:
        set_mode(GenerateBoard) because "Global timer"

