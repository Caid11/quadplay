Play
════════════════════════════════════════════════════════════════════════

// Cooldown
let last_countdown_sound_time

enter
────────────────────────────────────────────────────────────────────────
assert(not in_waiting_room)

// Repeat Title global setup in case we're debugging
// and started in this mode
set_hooks()
set_random_seed()

player_reset(player, game_type)
last_countdown_sound_time = now()

if DEBUG_HISTORY or DEBUG_GAME_OVER:
    for i < 60: player_add_to_history(player, "FOOBAR", 3 + i)

// Compute end_time
if game_type == SOLO:
    end_time = utc_time + SOLO_GAME_TIME
else:
    assert(game_type == GLOBAL)
    
    end_time = prev_global_game_utc_start_time() + GLOBAL_GAME_TIME

    assert(end_time > utc_time + GLOBAL_JOIN_MIN_REMAINING_TIME - 1,
        "The game should not end so soon")

set_background(
    if game_type == GLOBAL then GLOBAL_BACKGROUND_COLOR
    else SOLO_BACKGROUND_COLOR)

frame
────────────────────────────────────────────────────────────────────────
if mode_frames == 1 and not in_waiting_room:
    // Play here instead of enter because
    // creating the board can delay the first frame
    play_sound(start_sound)

player_update(player, ∅, true)

const time_left = end_time - utc_now()
if time_left > 0.1 and time_left < 5.5 and |loop(time_left, -0.5, 0.5)| ≤ 1/30 and now() - last_countdown_sound_time > 0.2:
    // Play on the second turnover exactly (so it aligns with the global clock instead of local frames)
    // but ensure that we play only once per timeout
    last_countdown_sound_time = now()
    play_sound(timer_countdown_sound, false, 150%)

    
if time_left ≤ 0 or DEBUG_GAME_OVER:
    play_sound(times_up_sound)
    set_mode(Intermission) because "Timer"

// Hint for compiler:
// push_mode(Rotate) because "Rotate button"
            