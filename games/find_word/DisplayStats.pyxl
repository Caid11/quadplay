DisplayStats
════════════════════════════════════════════════════════════════════════
const WIDTH = 224

/*
 - `caption`  Left column value
 - `lifetime` Center column value
 - `today`    Right column value
 - `color`    Color of the left and center values
 - `today_color` Color of the today value
*/
def draw_row(y, caption, lifetime, today, color default #fff, today_color default color, today_suffix default ∅):
    const args = {font: leaderboard_font, color: color, outline: #000, x_align: "left"}
    const x = ½ SCREEN_SIZE.x
    const x_left   = x - ½ WIDTH + 12
    const x_center = x + (if today ≠ "N/A" then 36 else 70)
    const x_right  = x + ½ WIDTH - 10
    
    if caption: draw_text({…args, text: caption, pos: xy(x_left, y)})
    
    if today_suffix:
        draw_text({…args,
            pos: xy(x_right + 4, y),
            text: today_suffix,
            color: today_color})
    
    if caption and ends_with(caption, "Word"): args.font = history_font
    args.x_align = "right"
    draw_text({…args, text: lifetime, pos: xy(x_center,  y)})
    if today and today ≠ "N/A": draw_text({…args, text: today, pos: xy(x_right, y), color: today_color})
    return 14



def draw_trend_row(y, caption, format, lifetime, today, color, highlight_color):
    return draw_row(
        y,
        caption,
        format_number(lifetime, format),
        format_number(today, format),
        color, 
        if today > lifetime then highlight_color else ∅,
        if today > lifetime then "↑" else ∅)
    
    

enter
────────────────────────────────────────────────────────────────────────



frame
────────────────────────────────────────────────────────────────────────
draw_background_words()
draw_rect(½ SCREEN_SIZE, xy(WIDTH, SCREEN_SIZE.y), #0009)

draw_sprite({sprite: player.avatar.sprite.x_flipped, pos: xy(½ SCREEN_SIZE.x - ½ WIDTH + 22, 15), scale: 200%})

local:
    const x = ½ SCREEN_SIZE.x - ½ WIDTH + 55
    draw_text({text: player.avatar.name + ": Level " + player.avatar.level, font: score_font, x_align: "left", pos: xy(x, 9), color: #FFF})
    draw_text({text: format_number(player.stats.lifetime.xp + player.stats[today_date_string()].xp, "commas") + " XP. Next level @ " + format_number(level_to_xp(player.avatar.level + 1), "commas") + " XP", font: leaderboard_font, x_align: "left", pos: xy(x, 22), color: #FFF})


const lifetime = player.stats.lifetime
const today    = player.stats[today_date_string()] default make_empty_stats_entry()

let y = 36 + ½ (SCREEN_SIZE.y - 224)
const DIM = #6AD
const HIGHLIGHT = #E1B

y += draw_row(y, ∅, "Past", "Today", HIGHLIGHT)
y -= 1

if player.has_ability["Longest Word Stat"]:
    y += draw_row(y, "Longest Word", lifetime.longest_text, today.longest_text or "-", ∅, if size(today.longest_text) ≥ size(lifetime.longest_text) and (today.longest_text ≠ "") then HIGHLIGHT else ∅)

if player.has_ability["Best Word Stat"]:
    y += draw_row(y, "Best Word",
        if (lifetime.best_word_text ≠ "") then lifetime.best_word_text + " " + lifetime.best_word_points else "", 
        (if today.best_word_text then (today.best_word_text + " " + today.best_word_points) else "-"),
        DIM,
        if today.best_word_text and (today.best_word_points ≥ lifetime.best_word_points) then HIGHLIGHT else ∅)

if player.has_ability["Most Words Stat"]:
    y += draw_trend_row(y, "Most Words/Match", "0", lifetime.most_words, today.most_words, ∅, HIGHLIGHT)
    
if player.has_ability["High Score Stat"]:
    y += draw_trend_row(y, "Highest Score", "commas", lifetime.best_score, today.best_score, DIM, HIGHLIGHT)

y += 5
y += draw_row(y, "XP",           format_number(lifetime.xp, "commas"), "+" + format_number(today.xp, "commas"))

if player.has_ability["Total Words Stat"]:
    y += draw_row(y, "Total Words",  format_number(lifetime.words, "commas"), "+" + format_number(today.words, "commas"), DIM)

if player.has_ability["Total Matches Stat"]:
    y += draw_row(y, "Total Matches",format_number(lifetime.matches, "commas"), "+" + today.matches)

if player.has_ability["Unique Words Stat"]:
    y += draw_row(y, "Unique Words", format_number(size(player.stats.lifetime.word_list), "commas"),  "+" + size(today.word_list), DIM)

y += 5
if player.has_ability["Words/Match Stat"]:
    y += draw_trend_row(y, "Avg. Words/Match", "0.0", lifetime.words / max(lifetime.matches, 1), today.words / max(today.matches, 1), ∅, HIGHLIGHT)

if player.has_ability["Points/Match Stat"]:
    y += draw_trend_row(y, "Avg. Points/Match", "0", lifetime.points / max(lifetime.matches, 1), today.points / max(today.matches, 1), DIM, HIGHLIGHT)


// Large done button, which is always selected
local:
    const rect = {pos: xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 18), size: xy(150, 21)}
    
    for 1 ≤ i < 4: 
        draw_rect(rect.pos, rect.size + 2i, ∅, rgba(lerp(#FFF, CURSOR_COLOR, (i + 1) / 4), 50%), ∅, 100)
            
    draw_rect(rect.pos, rect.size, CURSOR_COLOR, #FFF)
    draw_text({
        font: score_font,
        text: "Done",
        pos: rect.pos + xy(0, 1),
        outline: #000,
        color: #FFF})
        

if (gamepad_array[0].pressed_a or gamepad_array[0].pressed_b or touch.pressed_a) and mode_frames > 2:
    pop_mode()



