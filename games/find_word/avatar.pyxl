/* Total number of avatar sprites available. In the actual 
   spritesheet, the last few are unused, so we stop this 
   count early. Note that there are other restrictions
   on which avatars can be used. */
const AVATAR_SPRITE_COUNT = avatar_sprite.size_in_sprites.x * ½ avatar_sprite.size_in_sprites.y - 9

todo("** Lock avatars by level **")

todo("Introduce KAT, kit, and evil(er) K4T")

/* Prevent players from using these */
const AVATAR_RESTRICTED_INDEXES = [
    // caf (Baby Moo)
    xy(33, 22), 
    
    // Moo
    xy(34, 22)
    
    // kit (Baby KAT)
    xy(47, 6)
    
    // KAT
    xy(0, 8),
    
    // KAT doppleganger
    xy(1, 8)]
    
    

def avatar_save(avatar):
    // Other properties are recomputed on load
    save_local("avatar", {
        name: avatar.name,
        id: avatar.id,
        sprite_index: avatar_sprite_to_linear_index(avatar.sprite)})



def new_guid():
    return "U" + round(utc_now() * 1000)
    


def avatar_load():
    let avatar_data = load_local("avatar")
    
    if not avatar_data:
        avatar_data = {
            sprite_index: random_integer(0, AVATAR_SPRITE_COUNT - 1),
            id: new_guid(),
            name: ""}

        // Generate a random name
        while avatar_data.name == "" or sensitive[lowercase(avatar_data.name)]:
            avatar_data.name = ""
            for i < 3:
                avatar_data.name += random_value(ALPHABET)
        
        // Persist the random avatar        
        save_local("avatar", avatar_data)
    
    const sprite = avatar_sprite_from_linear_index(avatar_data.sprite_index)
    
    return {
        sprite: sprite,
        id: avatar_data.id default new_guid(),
        // Will be computed from player stats
        level: ∅,
        color: avatar_compute_color(sprite),
        name: avatar_data.name}
        
    

def avatar_compute_color(sprite):
    const color = hsv(sprite.mean_color)
    color.s *= 130%
    color.v = max(color.v, 70%)
    return rgb(color)


        
def avatar_draw_large(avatar, pos, background default true, color, shadow default #000, spin default false):
    
    let sprite = avatar.sprite
    
    if ⌊(game_frames + 15) / 30⌋ mod 2:
        sprite = sprite.spritesheet[sprite.tile_index.x][sprite.tile_index.y + 1]
        sprite = sprite_transfer_orientation(avatar.sprite, sprite)
        if spin: sprite = sprite.x_flipped

    sprite = sprite.x_flipped
    
    // Outline
    for -1 ≤ dx ≤ +1:
        if dx ≠ 0:
            draw_sprite({sprite: sprite, scale: 200%, override_color: #000, pos: pos + xy(dx, -1), z: 5})
            draw_sprite({sprite: sprite, scale: 200%, override_color: #000, pos: pos + xy(0, dx - 1), z: 5})
    
    draw_sprite({sprite: sprite, scale: 200%, pos: pos + xy(0, -1), z: 5})
    
    color = color default (if background then avatar.color else player.board.selection_color)
    draw_text({font: score_font, text: avatar.name, color: color, shadow: shadow, pos: pos + xy(0, 27), z: 5})



/* Computes an index of this sprite so that we can get the "next" and "previous". */
def avatar_sprite_to_linear_index(sprite):
    const index = sprite.tile_index.x + ⌊½ sprite.tile_index.y⌋ * sprite.spritesheet.size_in_sprites.x
    assert(index ≥ 0 and index < AVATAR_SPRITE_COUNT)
    return index



/* Inverse of `avatar_sprite_to_linear_index()` */
def avatar_sprite_from_linear_index(index):
    assert(index ≥ 0 and index < AVATAR_SPRITE_COUNT)

    const x = index mod avatar_sprite.size_in_sprites.x
    const y = 2 ⌊index / avatar_sprite.size_in_sprites.x⌋
    
    assert(x < avatar_sprite.size_in_sprites.x and x ≥ 0)
    assert(y < avatar_sprite.size_in_sprites.y - 1 and y ≥ 0)
    
    return avatar_sprite[x][y]



def avatar_next_sprite(sprite, dir default +1):
    // Advance one
    let i = avatar_sprite_to_linear_index(sprite)
    i = loop(i + dir, AVATAR_SPRITE_COUNT)
    sprite = avatar_sprite_from_linear_index(i)
    
    if (contains(AVATAR_RESTRICTED_INDEXES, sprite.tile_index, equivalent) or
        // Harpy's special avatar
        ((player.avatar.name ≠ "bug" or player.level < 8) and equivalent(sprite.tile_index, HARPY_AVATAR_INDEX))):
            
        return avatar_next_sprite(sprite, dir)
    else:
        return sprite



def avatar_next_name_letter(letter, dir default +1):
    let i = find(AVATAR_NAME_ALPHABET, letter)
    i = loop(i + dir, size(AVATAR_NAME_ALPHABET))
    return AVATAR_NAME_ALPHABET[i]
    
    
    
    