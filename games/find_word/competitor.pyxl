/* Information about other players online (or virtual ones) used by Intermission */


/* `{avatar, score, word_list, representative_text, badges}`
   `word_list` is Q-encoded */
const competitor_array = []

let player_competitor

// Competitors winning each award
let best_word_winner
let best_rare_winner
let longest_winner
let most_words_winner

/* Generate a stable set of bots with a range of abilities, and 
   produce their scores and word lists for the current `player.board`. */
def insert_bots(competitor_array, target_count):
    const avatar_set = [
        {name: "Moo", sprite: avatar_sprite[34][22]},
        {name: "411", sprite: avatar_sprite[24][18]},
        {name: "o_o", sprite: avatar_sprite[20][14]},
        {name: "AMS", sprite: avatar_sprite[37][14]},
        {name: "NT",  sprite: avatar_sprite[17][6]},
        {name: "Bob", sprite: avatar_sprite[28][26]},
        {name: "I♥U", sprite: avatar_sprite[3][20]},
        {name: "THX", sprite: avatar_sprite[13][4]},
        {name: "jen", sprite: avatar_sprite[39][8]},
        {name: "RLL", sprite: avatar_sprite[33][24]},
        {name: "CJ",  sprite: avatar_sprite[39][24]},
        {name: "TTT", sprite: avatar_sprite[39][16]},
        {name: "HCD", sprite: avatar_sprite[39][2]},
        {name: "GEW", sprite: avatar_sprite[39][2]},
        {name: "jr",  sprite: avatar_sprite[9][18]},
        {name: "FLA",  sprite: avatar_sprite[9][16]},
        {name: "Lou",  sprite: avatar_sprite[8][18]},
        {name: "RON",  sprite: avatar_sprite[8][16]},
        {name: "PO8",  sprite: avatar_sprite[21][2]}]
    
    // Make the competitors stable in their personalities by using a fixed
    // competitor_rng for anything specific to the competitor generation. Do not use
    // this competitor_rng for word selection.
    const competitor_rng = make_random(4582)

    // Make results for the board stable so that all human players see the
    // bots doing the same things
    const match_rng = make_random(player.board.seed)
    
    // Used for finding legal substrings
    const word_table = {}
    for word in player.board.word_list:
        if dictionary[word]:
            word_table[word] = 1
    
    // Used for determining which players are active
    const hour = local_time().hours
    
    // Shift everybody's ability by this amount
    const match_shift = match_rng(-10%, 0%)
    
    // Decrease the chance of getting the player's best words
    const protect = {}    
    /*
    // This is not player-independent, so causes divergence. Only do
    // if there is a single human player
    if player.history:
        for i < min(3, size(player.history.list)):
            const entry = player.history.list[i]
            if entry.points > 32 and match_rng() < min(90%, 30% + entry.points / 100):
                protect[entry.word] = 1
                */
    
    let c = 0
    while size(competitor_array) < target_count:    
        const competitor = {
            avatar: avatar_set[c],
            score: 0}
            
        // Ran out!
        if not competitor.avatar: return
        
        ++c
        competitor.avatar.color = avatar_compute_color(competitor.avatar.sprite)
        
        // Make stable how good this player is overall, and then add noise per game.
        // Apply that as a fraction of all words possible
        const base_ability = max(2%, competitor_rng()³ * 35% + match_shift)
        const find_percentage = min(28%, match_rng(3%^⅓, 30%^⅓)³ + base_ability)
        const words_found = clamp(⌊size(player.board.word_list) * find_percentage⌋, 10, 55)
        
        const short_word_preference = max(100% - 4 base_ability, competitor_rng(0%, 90%))

        // Is this particular competitor available right now? Choose stable random
        // hours that they play
        const first_hour = random_integer(0, 23, competitor_rng)
        const last_hour  = (random_integer(4, 14, competitor_rng) + first_hour) mod 24
        
        if last_hour > first_hour:
            if hour < first_hour or hour > last_hour: continue
        else:
            // Play hours wrapped around the clock
            if hour > last_hour and hour < first_hour: continue
        
        // Make a bogus word list for this competitor and score it.
        // Choose both from the player's discovered words and
        // from the board. Higher chance of discovering shorter words
        // via rejection sampling.
        
        const word_set = {}
        def maybe_add_word(word):
            // Accept words that this competitor hasn't found with
            // decreasing probability as the word gets longer than 3 letters.
            // Players with higher base percentages also are better at long words.
            if not word_set[word] and not protect[word] and match_rng() ≤ (2.8 base_ability + 23%) / pow(max(size(word) - 2, 1), 0.4 + 3 short_word_preference):
                // Ensure that if a word is found, all substrings are found
                for 3 ≤ s ≤ size(word):
                    const w = slice(word, 0, s)
                    if word_table[w]:
                        word_set[w] = 1
        
        // Pick up a bunch of cheap words first
        let tries = 0
        while size(word_set) < clamp(2 short_word_preference, 10%, 90%) * words_found and tries < 2 words_found:
            ++tries
            const word = random_value(player.board.word_list, match_rng)
            if size(word) < 5:
                maybe_add_word()
        
        tries = 0
        while size(word_set) < words_found and tries < 2 words_found:
            ++tries
            maybe_add_word(random_value(player.board.word_list, match_rng))

        /*
        // Not player-independent. Only do if there is a single human player.
        // Steal some words from the player (if the player had any words)

        if size(player.history.list) > 0:
            tries = 0
            while size(word_set) < words_found and tries < words_found:
                ++tries
                maybe_add_word(random_value(player.history.list, match_rng).word)
        */
        
        competitor.word_list = keys(word_set)
                
        sort(competitor.word_list, size_comparator, true)
        
        for word at i in competitor.word_list:
            competitor.score += score_word(word)
        
        push(competitor_array, competitor)



/* Convert the local player into a competitor */
def make_player_competitor():
    const competitor = {
        avatar: player.avatar,
        score: player.score,
        word_list: []}
    
    for entry in player.history.list:
        push(competitor.word_list, entry.word)
        
    return competitor



/* Called from `Intermission.enter` */
def competitor_analyze(competitor_array):
    // How many players have each word; used for 
    // identifying rare words
    const count = {}
    
    // Compute everyone's best results
    for competitor in competitor_array:
        competitor.badges = ""
        
        // Censor names by slicing off the 2nd letter, if inappropriate,
        // and replacing common letter substitutions to prevent casual
        // looks-like thwarting
        if sensitive[lowercase(replace(competitor.avatar.name, LOOKS_LIKE))] or sensitive[lowercase(competitor.avatar.name)]:
            competitor.avatar.name = competitor.avatar.name[0] + competitor.avatar.name[2] + " "

        competitor.best_word_points = 0
        competitor.longest_size = 0
        for word in competitor.word_list:
            // Increment the count
            count[word] = (count[word] default 0) + 1
            
            const points = score_word(word)
            const text = q_decode(word)
            
            if (points > competitor.best_word_points) or (points == competitor.best_word_points and text > competitor.best_word_text):
                competitor.best_word_points = points
                competitor.best_word_text = text
                competitor.text = text
        
            if (size(text) > competitor.longest_size) or (size(text) == competitor.longest_size and text > competitor.longest_text):
                competitor.longest_size = size(text)
                competitor.longest_text = text
    
    // Count at which a word is rare
    const rare_threshold = max(1, floor(size(competitor_array) / 6))

    // Find the best rare word for each competitor
    for competitor in competitor_array:
    
        competitor.num_rare = 0
        competitor.best_rare_points = 0
        competitor.best_rare_text = 0
    
        for word in competitor.word_list:
            if count[word] <= rare_threshold:
                const points = score_word(word)
                const text = q_decode(word)
                
                // This word has appeared very few times
                ++competitor.num_rare
                
                if points > competitor.best_rare_points or (points == competitor.best_rare_points and text > competitor.best_rare_text):
                    competitor.best_rare_points = points
                    competitor.best_rare_text = text
    
    // Update the history rare fields for the player competitor
    // as these are used for display. We don't need this for others
    for entry in player.history.list:
        if count[entry.word] <= rare_threshold:
            entry.rare = true
    
    competitor_assign_awards(competitor_array)
    
    
    
/* Helper for `competitor_analyze()`. Sets the `_winner` globals
   and assigns the `competitor.badges` strings. */
def competitor_assign_awards(competitor_array):
    // Rank all competitors by score
    sort(competitor_array, "score", true)
    
    // Find the winner in each category. Ties are broken
    // by total score by running in order after that sort
    best_word_winner  = competitor_array[0]
    best_rare_winner  = competitor_array[0]
    longest_winner    = competitor_array[0]
    most_words_winner = competitor_array[0]
    
    for competitor in competitor_array:
        if competitor.best_word_points > best_word_winner.best_word_points:
            best_word_winner = competitor
            
        if competitor.best_rare_points > best_rare_winner.best_rare_points:
            best_rare_winner = competitor

        if competitor.longest_size > longest_winner.longest_size:
            longest_winner = competitor
            
        if size(competitor.word_list) > size(most_words_winner.word_list):
            most_words_winner = competitor



    // Now loop again and give badges, including for ties:
    for competitor in competitor_array:
        // Put in the same order as the award stages
        if competitor.best_word_points == best_word_winner.best_word_points:
            competitor.badges += BADGE_TABLE.best_word
            
        if competitor.best_rare_points == best_rare_winner.best_rare_points:
            competitor.badges += BADGE_TABLE.best_rare

        if competitor.longest_size == longest_winner.longest_size:
            competitor.badges += BADGE_TABLE.longest

        if size(competitor.word_list) == size(most_words_winner.word_list):
            competitor.badges += BADGE_TABLE.most_words
        

