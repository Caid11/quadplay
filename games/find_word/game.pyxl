/* Set by Title. `SOLO` or `GLOBAL`. See also `in_waiting_room` */
let game_type = SOLO

/* In seconds, using utc_time */
let start_time

/* In seconds, using utc_time */
let end_time

/* If true, then the player is just warming
   up for a `GLOBAL` game that will start soon. */
let in_waiting_room = false

let player = make_player()

let resolution_hook
let time_hook
let input_hook


const SOLO_GAME_TIME = 60 SOLO_GAME_TIME_MINUTES

const GLOBAL_INTERMISSION_TIME = GLOBAL_INTERMISSION_TIME_SECONDS
const GLOBAL_GAME_TIME = GLOBAL_GAME_TIME_SECONDS

/* Global games are synchronized to this clock, hitting this period exactly 
   relative to UTC Unix 0 time */
const GLOBAL_PERIOD = GLOBAL_GAME_TIME + GATHER_TIME_SECONDS + GLOBAL_INTERMISSION_TIME


/* Array of strings for background display on the title and avatar editor, by row. See `draw_background_words()`. */
const background_word_array = []


/* Used by Title and AvatarEditor */
def draw_background_words():
    for s at y in background_word_array:
        draw_text({
            font: tile_font,
            color: #333,
            text: s,
            pos: xy(sign((y mod 2) - 0.5) * 0.2 oscillate(game_frames, -2000, 2000) - 700, 22 y),
            x_align: "left",
            z: -2})
    

/* Updated once per frame by a frame hook. This ensures that there are no 
   race conditions within a frame because the time can only change 
   between frames */
let utc_time = utc_now()


/* Time at which the last global game already started
   (or is about to start) */
def prev_global_game_utc_start_time():
    return floor(utc_time, GLOBAL_PERIOD)



/* Time at which the next global game will start */
def next_global_game_utc_start_time():
    return round(utc_time, GLOBAL_PERIOD)



/* Returns the second to last value or ∅ */
def penultimate_value(array):
    return array[size(array) - 2]



def _update_utc_time():
    const prev_time = utc_time
    utc_time = utc_now()
    
    if utc_time - prev_time > 60 * REBOOT_TIME_MINUTES:
        reset_game()



/* Hook that automaticaly switches the detected input mechanism */
def detect_input():
    if player.gamepad.pressed_a or player.gamepad.pressed_b or player.gamepad.xx or player.gamepad.yy:
        player.using_gamepad = true
    else if touch.dx or touch.dy or touch.pressed_a or touch.hover:
        // Used touch screen or mouse
        player.using_gamepad = false



/* Returns a boolean that is true if the button has just been
   pressed or is on a repeat press this frame */
def button_repeat(button_frames):
    return (
        (button_frames == 1) or 
          (MAX(button_frames - BUTTON_REPEAT_DELAY, 0) mod BUTTON_REPEAT_PERIOD) == 1)



/* `true` if in landscape layout mode */
def landscape():
    return SCREEN_SIZE.x + 28 > SCREEN_SIZE.y


/* For sorting on size(A) */
def size_comparator(A, B):
    return size(A) - size(B)


/* Returns str with str[index] replaced with `replacement` */
def letter_replaced(str, index, replacement):
    return slice(str, 0, index) + replacement + slice(str, index + 1)


/* Swap elements i and j in array. */
def swap(array, i, j):
    const temp = array[i]
    array[i] = array[j]
    array[j] = temp

    

/* Weigh the probability towards capital letters,
   and always start with a capital letter */
def make_random_name(rng default random):
    return replace(
        random_value(ALPHABET, rng) +
        random_value(AVATAR_NAME_ALPHABET + ALPHABET, rng) +
        random_value(AVATAR_NAME_ALPHABET + ALPHABET, rng), " ", "O")



/* Fill the screen even at non-quadplay aspect ratios
   for a good mobile experience. See also `DEBUG_PORTRAIT` */
def set_hooks():
    
    if not input_hook:
        input_hook = add_frame_hook(detect_input, ∅, ∞, "all")
    
    if not time_hook:
        time_hook = add_frame_hook(_update_utc_time, ∅, ∞, "all")
        
    if not resolution_hook:
        device_control("set_mouse_cursor", "pointer")
        
        if DEBUG_LANDSCAPE:
            set_screen_size(xy(384, 224))
        else if DEBUG_PORTRAIT:
            device_control("enable_feature", "custom_screen_size")
            set_screen_size(xy(224, 400))
        else:
            resolution_hook = continuously_set_screen_size_to_window("smaller", 224)


set_random_seed()

// Initialize the background words
for y < 20:
    let s = random_safe_word()
    while size(s) < 250:
        s += " " + random_safe_word()
    background_word_array[y] = s

