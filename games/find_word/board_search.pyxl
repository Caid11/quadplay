/* Creates a random board, searching for good values as controlled by `BOARD_SEARCH` constants. */
def _player_find_good_board(player, game_type):
    let done = false
    let seed_word
    let word_array
    
    // Construct the rng based on the time. This will
    // cause players within the same window to be more likely
    // to have the same board. Temporary prior to investing
    // multiplayer servers.
    const rng_seed = (if in_waiting_room or game_type == SOLO or DEBUG_BOARD_SEARCH then 
            (10 utc_now())
        else
            // Use the seed for the curent game period, but look a few
            // seconds into the future in case this player is joining early
            // to make it robust
            ⌊1 + (utc_now() + 10) / GLOBAL_PERIOD⌋)
    
    const board_rng = make_random(rng_seed)
    
    let short_word_count = 0
    let long_word_count = 0
    let very_long_word_count = 0
    let valuable_letter_table = {}
    let valuable_letter_long_count = {}
    let mean_valuable_letter_uses = 0
    let mean_valuable_letter_long_uses = 0
    let min_valuable_letter_uses = ∞
    let min_valuable_letter_long_uses = ∞
            
    for i < BOARD_SEARCH.RETRIES:
        if i > 0 and DEBUG_BOARD_SEARCH: debug_print("*** Re-rolling ***") 

        // Search for a not-sensitive seed word to use
        seed_word = random_safe_word(board_rng)
        
        // Loop for shuffling
        for j < BOARD_SEARCH.SHUFFLE_RETRIES:
            board_reset(player.board, seed_word, j)
            word_array = board_find_all_words(player.board)
        
            if i == BOARD_SEARCH.RETRIES - 1 and j == BOARD_SEARCH.SHUFFLE_RETRIES - 1:
                // Last try, so just give up and accept the board
                if DEBUG_BOARD_SEARCH: debug_print("Gave up and accepted " + seed_word)
                done = true
                break
    
            if board_has_obvious_sensitive_word(player.board):
                if DEBUG_BOARD_SEARCH: debug_print("Reshuffled board " + seed_word + " because it had an obvious sensitive word")
                continue
    
            if size(word_array) < BOARD_SEARCH.MIN_WORDS:
                // Not enough words to even examine the board
                if DEBUG_BOARD_SEARCH: debug_print("Reshuffled board " + seed_word + " because it only produced " + size(word_array) + " words")        
                continue
    
            // Examine the actual words to see if there are enough good ones   
    
            // If a valuable letter appears, ensure that it is used in 
            // at least two words. First find high point value letters.
                        
            // Number of times a valuable letter was used
            valuable_letter_table = {}
            let num_valuable_letter_instances = 0
            for col in player.board.tile:
                for tile in col:
                    if LETTER_POINT_TABLE[tile.letter] ≥ 4:
                        valuable_letter_table[tile.letter] = 0
                        ++num_valuable_letter_instances
            
            const valuable_letters = keys(valuable_letter_table)
            valuable_letter_long_count = clone(valuable_letter_table)
        
            
            // Iterate through words, rating them for each criterion
            short_word_count = 0
            long_word_count = 0
            very_long_word_count = 0
            for word in word_array:
                if size(word) ≤ 4:
                    ++short_word_count
                if size(word) ≥ 5 and size(word) < 7:
                    ++long_word_count
                if size(word) ≥ 7:
                    ++very_long_word_count
                    
                if size(word) ≥ 5:
                    ++long_word_count
                    
                for letter in valuable_letters:
                    if contains(word, letter):
                        ++valuable_letter_table[letter]
                        
                        if size(word) ≥ 5:
                            ++valuable_letter_long_count[letter]
            
            if short_word_count < BOARD_SEARCH.MIN_SHORT_WORDS:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it only produced " + short_word_count + " short words")        
                continue
            
            if long_word_count < BOARD_SEARCH.MIN_LONG_WORDS:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it only produced " + long_word_count + " long words")        
                continue
            
            if very_long_word_count < BOARD_SEARCH.MIN_VERY_LONG_WORDS:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it only produced " + very_long_word_count + " very long words")        
                continue
            
            // See if we used the valuable letters.
            let total_valuable_letter_uses = 0
            let total_valuable_letter_long_uses = 0
            min_valuable_letter_uses = ∞
            min_valuable_letter_long_uses = ∞
            
            for count at letter in valuable_letter_table:
                total_valuable_letter_uses += count
                total_valuable_letter_long_uses += valuable_letter_long_count[letter]
                min_valuable_letter_uses = min(min_valuable_letter_uses, count)
                min_valuable_letter_long_uses = min(min_valuable_letter_long_uses, valuable_letter_long_count[letter])
            
            mean_valuable_letter_uses = total_valuable_letter_uses / max(num_valuable_letter_instances, 1)
            mean_valuable_letter_long_uses = total_valuable_letter_long_uses / max(num_valuable_letter_instances, 1)
            
            if mean_valuable_letter_uses < BOARD_SEARCH.MEAN_VALUABLE_LETTER_USES:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it did not use all of the valuable letters enough on average")
                continue
            
            if mean_valuable_letter_long_uses < BOARD_SEARCH.MEAN_VALUABLE_LETTER_LONG_WORDS:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it did not use all of the valuable letters in " + BOARD_SEARCH.MIN_VALUABLE_LETTER_LONG_WORDS + "long words enough on average")
                continue

            if min_valuable_letter_uses < BOARD_SEARCH.MIN_VALUABLE_LETTER_USES:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it did not use all of the valuable letters enough")
                continue
            
            if min_valuable_letter_long_uses < BOARD_SEARCH.MIN_VALUABLE_LETTER_LONG_WORDS:
                if DEBUG_BOARD_SEARCH: debug_print("Shuffled board " + seed_word + " because it did not use all of the valuable letters in " + BOARD_SEARCH.MIN_VALUABLE_LETTER_LONG_WORDS + "long words enough")
                continue
    
            // Success!
            done = true
            break
    
        if done:
            // Stop early as we have a good board
            if DEBUG_BOARD_SEARCH: debug_print("Accepted board")
            break
        else:
            // Try again
            seed_word = ∅
    
    player.board.word_list = word_array
    player.board.word_count = size(word_array)
    if DEBUG_BOARD_SEARCH:
        debug_print(player.board.word_list)
        debug_print("very_long_word_count =", very_long_word_count)
        debug_print("valuable_letter_table =", valuable_letter_table)
        debug_print("valuable_letter_long_count =", valuable_letter_long_count)
        debug_print("size(word_array) =", size(word_array))
        debug_print("short_word_count =", short_word_count)
        debug_print("long_word_count =", long_word_count)
        debug_print("mean_valuable_letter_uses =", mean_valuable_letter_uses)
        debug_print("mean_valuable_letter_long_uses =", mean_valuable_letter_long_uses)
        debug_print("min_valuable_letter_uses =", min_valuable_letter_uses)
        debug_print("min_valuable_letter_long_uses =", min_valuable_letter_long_uses)


/* Chooses a random letter for each tile, and then 
   permutes the result into pattern `seed_number`.
   This process is entirely deterministic based on
   the input. */
def board_reset(board, seed_word, permute_number default 0):
    board.seed = seed_word + "-" + permute_number
    const rnd = make_random(seed_word)
    
    // Shuffle the sets themselves
    assert(ROWS * COLS == size(LETTER_SET_ARRAY), "Distribution does not have enough tile sets")

    // If true, choose using the word dice algorithm with the
    // standard dice set. If false, choose using sampling from 
    // a bag of tiles without replacement.
    const dice = rnd() < 85%
    if DEBUG_BOARD_SEARCH:
        debug_print("Using " + (if dice then "DICE" else "TILE") + " generator")

        
    const distribution = shuffled(LETTER_SET_ARRAY, rnd)
    let letter_bag = split(LETTER_BAG)
    
    const flat_array = []
    for y < ROWS:
        for x < COLS:
            const tile = board.tile[x][y]
            if dice:
                tile.letter = random_value(pop(distribution), rnd)
            else:
                tile.letter = random_value(letter_bag, rnd)
                fast_remove_value(letter_bag, tile.letter)
                
            tile.selected = 0
            // Store for shuffling below
            push(flat_array, tile)
        
    
    if permute_number > 0:
        shuffle(flat_array, make_random(permute_number))
        // Put back
        for y < ROWS:
            for x < COLS:
                board.tile[x][y] = flat_array[x + y * COLS]
    
    if DEBUG_BOARD_SEARCH: debug_print(board_to_string(board))


