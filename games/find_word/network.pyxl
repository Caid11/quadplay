/* The group conduit for exchanging scores */
let conduit

/* Called from `update_player()` */
def maybe_connect_to_network():
    if in_waiting_room or game_type ≠ GLOBAL or DEBUG_OFFLINE: return
    
    // Time in seconds to connect into the network
    // before the game ends, so that everyone is exchange word lists 
    // on game end.
    const NETWORK_CONNECT_TIME = 10
    
    // Within the NETWORK_CONNECT_TIME window, what is the maximum time
    // to randomly delay so that all nodes aren't competing to connect
    // at exactly the same moment.
    const NETWORK_CONNECT_MAX_DELAY = 3
    
    // Create a stable offset based on the player's name and their first word
    const τ = hash(player.avatar.name + (last_value(player.history.list) default {text:"x"}).text)
    
    const my_connect_time = end_time - NETWORK_CONNECT_TIME + τ * NETWORK_CONNECT_MAX_DELAY

    // Create the conduit    
    if not conduit and utc_time > my_connect_time:
        conduit = make_conduit()



/* Called from `GatherGlobalResults.enter` */
def share_results_with_network(player_competitor):
    if conduit:
        // The conduit may have failed to connect, but that will just enqueue
        // the message, which is still safe
        conduit_send(conduit, player_competitor)
    

/* Handle incoming network messages. The only messages sent by this
   game are exchanging competitors. */
def _message_handler(message, node_netid, conduit):
    push(competitor_array, message)
    
    

/* Called from `GatherGlobalResults.frame` */
def update_network():
    if conduit:
        conduit_iterate(conduit, _message_handler)


    
/* Called from `GatherGlobalResults.leave` */
def disconnect_from_network():
    if conduit:
        conduit_close(conduit)
        conduit = ∅


