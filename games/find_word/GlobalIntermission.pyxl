GlobalIntermission
════════════════════════════════════════════════════════════════════════

// Cycle through the award stages. See `STAGE`
let stage

/* Stage from the previous frame, used for detecting stage
   changes to play sounds */
let prev_stage

/* Wall clock time in seconds ala `utc_now()` when the Intermission ends
   for a `GLOBAL` game. */
let end_time


/* Called from `draw_awards()` when `stage` == `STAGE.SUMMARY` */
def draw_award_summary()
& preserving_transform:
    draw_corner_rect(xy(-35, -36), xy(125, 63), player.avatar.color)
    avatar_draw_large(player.avatar, xy(-14, -6), false, #FFF)

    const shadow = 60% player.avatar.color
  
    const args = {font: history_font,
        x_align: "left",
        y_align: "baseline",
        shadow: shadow,
        color: #FFF}

    draw_text({…args, text: "Summary", pos: xy(31, -27), x_align: "center"})
    
    compose_transform(xy(55, 0))
    draw_text({ …args, text: format_number(player.score, "commas") + " {font:leaderboard_font pts}", font: score_font, pos: xy(10, -8), x_align: "right", markup: true})

    const x = -46
    draw_text({…args, text: "Found", pos: xy(x, 5)})
    draw_text({…args, text: "" + size(player.history.list) + "/" + player.board.word_count, pos: xy(30, 5), x_align: "right"})
    
    if game_type == GLOBAL:
        draw_text({…args, text: "Rare Words", pos: xy(x, 14)})
        draw_text({…args, text: player_competitor.num_rare, pos: xy(30, 14), x_align: "right"})

    draw_text({…args, text: "Longest", pos: xy(x, 23)})
    draw_text({…args, text: player_competitor.longest_text, pos: xy(30, 23), x_align: "right"})



/* Draw and animate Awards (Summary, Longest, Best Word, Best rare, High Score, Most Words) */
def draw_awards()
& preserving_transform:
    set_transform(xy(SCREEN_SIZE.x - 88, 34))
    if stage ≠ prev_stage and mode_frames > 10:
        play_sound({sound: word_sound, pan: xy(0, 0)})

    if stage == STAGE.SUMMARY:
        draw_award_summary()
   
    else if stage == STAGE.BEST_WORD:
        draw_word_award("Best Word", best_word_winner)
   
    else if stage == STAGE.LONGEST:
        draw_word_award("Longest", longest_winner)
        
    else if stage == STAGE.BEST_RARE:
        draw_word_award("Best Rare", best_rare_winner)
    
    else if stage == STAGE.MOST_WORDS:
        draw_most_words_award(most_words_winner)



def maybe_player_award_sound(winner):
    if player_competitor == winner and stage ≠ prev_stage:
        play_sound(award_sound)



/* Used for best_word, longest, The title is used to compute the field */
def draw_word_award(title, winner):
    maybe_player_award_sound(winner)
        
    const field = replace(lowercase(title), {" ": "_"})
    const text = winner[field + "_text"]
        
    draw_award_background({corner: xy(-35, -24), size: xy(69, 37)}, field, winner.avatar.color)

    draw_text({font: history_font, text: title + "!", color: player.board.selection_color, shadow: #000, pos: xy(0, -29), z: 2})
    draw_text({font: history_font, text: "→", color: player.board.selection_color, shadow: #000, pos: xy(32, -29), z: 2})
    
    avatar_draw_large(winner.avatar, xy(0, -5), false)
    
    if winner == player_competitor or not sensitive[lowercase(text)]:
        board_select_word(player.board, text)
        board_draw_mini(player.board, xy(SCREEN_SIZE.x - 26, 36))



def draw_award_background(rect, field, color)
& preserving_transform:
    
    draw_corner_rect(rect.corner, rect.size, color)
    let badge_background = BADGE_TABLE[field]
    for i < 4:
        badge_background += badge_background
    for i < 2:
        badge_background += "\n" + badge_background
    
    const badge_color = 92% color
    set_clip(transform_cs_to_ss(rect.corner), rect.size)
    draw_text({font: leaderboard_font, color: badge_color, text: badge_background, pos: xy(-36, -26), y_align: "top", x_align: "left"})



def draw_most_words_award(winner):
    maybe_player_award_sound(winner)
    ++draw_most_words_award.frames
    player.board.selection_color = #E1B

    draw_text({font: history_font, text: "Most Words: " + size(winner.word_list), color: player.board.selection_color, shadow: #000, pos: xy(0, -29), z: 2})
    draw_award_background({corner: xy(-35, -24), size: xy(69, 37)}, "most_words", winner.avatar.color)
    avatar_draw_large(winner.avatar, xy(0, -5), false, player.board.selection_color)

    let word
    // Find a non-sensitive word, but give up after four tries instead of locking up
    for i < 4:
        word = array_value(winner.word_list, (draw_most_words_award.frames / MOST_WORDS_AWARD_FRAMES_PER_WORD) + draw_most_words_award.skip, "loop")
        if winner ≠ player_competitor and sensitive[lowercase(q_decode(word))]:
            // Skip over this word
            ++draw_most_words_award.skip
            
    if winner == player_competitor or not sensitive[lowercase(q_decode(word))]:
        board_select_word(player.board, word)
        board_draw_mini(player.board, xy(SCREEN_SIZE.x - 26, 36))




/* Draw the ranked competitors and perform UI logic */
def draw_leaderboard()
& preserving_transform:
    set_clip(xy(0, 0), xy(SCREEN_SIZE.x, SCREEN_SIZE.y - 22))
    set_transform(xy(SCREEN_SIZE.x - 110, 72))

    draw_text({text: "Global Scoreboard", pos: xy(55, -5), x_align: "center", font: history_font, color: #E1B, shadow: #000})
    
    const RANK_SPACING_Y = 16
    const alt = ⌊mode_frames / 30⌋ mod 2
    
    for competitor at i in competitor_array:
        const pos = xy(-3, i * RANK_SPACING_Y + 8)
                
        const me = competitor == player_competitor

        // Highlight
        if me:
            draw_corner_rect(pos - xy(10, 9), xy(130, 18), player.avatar.color, ∅, ∅, -1)
            
        // Animate sprite
        let sprite = competitor.avatar.sprite
        
        if alt: sprite = sprite.spritesheet[sprite.tile_index.x][sprite.tile_index.y + 1]
         
        draw_sprite(sprite.x_flipped, pos - xy(1, 0))
        
        const text_args = {
                font: leaderboard_font,
                shadow: if me then 60% competitor.avatar.color else ∅,
                x_align: "left",
                color: #FFF}
        
        draw_text({…text_args,
            text: competitor.avatar.name,
            pos: pos + xy(8, 0),
            color: if me then #FFF else competitor.avatar.color})
        
        const badges = competitor.badges
        if size(badges) > 2:
                
            draw_text({…text_args,
                text: slice(competitor.badges, 0, 2),
                pos: pos + xy(27, alt - 1 - 4)})
            draw_text({…text_args,
                text: slice(competitor.badges, 2),
                pos: pos + xy(27, alt - 1 + 4)})
                
        else if size(badges) > 0:
            draw_text({…text_args,
                text: competitor.badges,
                pos: pos + xy(27, alt - 1)})
            
        draw_text({…text_args, text: format_number(competitor.score, "commas"), pos: pos + xy(60, 0), x_align: "right"})
        draw_text({
            …text_args, 
            font: history_font, 
            text: if competitor == player_competitor then competitor.text else censor(competitor.text), 
            x_align: "right", 
            pos: pos + xy(110, 0)})



def update_countdown():
    const time_left = max(end_time - utc_time, 0)
    const timer_pos = xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 10)
    const α = 100% - time_left / (if game_type == SOLO then SOLO_INTERMISSION_TIME else GLOBAL_INTERMISSION_TIME)
    
    draw_corner_rect(xy(0, timer_pos.y - 10), xy(SCREEN_SIZE.x, 19), #000, #FFF)
    draw_corner_rect(xy(1, timer_pos.y - 9), xy(α * (SCREEN_SIZE.x - 2), 17), #0F0)
    
    draw_text({
        font: score_font,
        text: format_number(time_left, "timer") + " until next game…",
        outline: #090,
        pos: timer_pos,
        color: #FFF})
    
    if utc_time ≥ end_time and not DEBUG_INTERMISSION:
        set_mode(GenerateBoard) because "Timer"
    

enter
────────────────────────────────────────────────────────────────────────
set_background(#333)

// Used to animate which word is being shown
draw_most_words_award.frames = 0

// Used to skip over sensitive words
draw_most_words_award.skip = 0

end_time = next_global_game_utc_start_time()

stage = STAGE.SUMMARY
prev_stage = stage


frame
────────────────────────────────────────────────────────────────────────

// Cycle through awards, giving equal time to each
if game_type == GLOBAL or DEBUG_INTERMISSION:
    prev_stage = stage
    stage = min(⌊size(STAGE) * mode_frames / (60 GLOBAL_INTERMISSION_TIME)⌋, size(STAGE) - 1)
    if stage == STAGE.MOST_WORDS2:
        // This is 2x as long
        stage = STAGE.MOST_WORDS

// Separator bars
draw_corner_rect(xy(SCREEN_SIZE.x - 125, 0), xy(2, SCREEN_SIZE.y), #000, ∅, -1)
draw_corner_rect(xy(SCREEN_SIZE.x - 125, 61), xy(125, 2), #000, ∅, 20)

const history_rect = {corner: xy(1, 1), size: xy(SCREEN_SIZE.x - 125, SCREEN_SIZE.y - 22)}
history_update(player.history, history_rect)

// Show the board so that it can appear in screenshots
const α = max(0%, 100% - max(mode_frames - 360, 0) / 90)
if stage == STAGE.SUMMARY and α > 0%
& preserving_transform:
    set_transform(history_rect.corner + history_rect.size - xy(46, 42))
    const history_tile_color = rgba(.8, .8, .8, α)
    const history_board_color = rgba(0, 0, 0, α)
    for x < COLS:
        for y < ROWS:
            const tile = player.board.tile[x][y]
            const letter = if tile.letter == "Q" then "Qu" else tile.letter
            const pos = 11 xy(x, y)
            draw_disk(pos, 5, history_tile_color)
            draw_text({
                font: history_font, 
                pos: pos,
                text: letter,
                color: history_board_color})
else:
    draw_text({
        font: history_font, 
        pos: history_rect.corner + history_rect.size - xy(5, 0),
        text: "Found " + size(player.history.list) + "/" + player.board.word_count,
        x_align: "right",
        y_align: "bottom",
        outline: #333,
        color: #DDD})
    
draw_awards()

draw_leaderboard()

            
// Countdown
update_countdown()

