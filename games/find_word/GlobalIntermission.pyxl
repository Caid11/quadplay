GlobalIntermission
════════════════════════════════════════════════════════════════════════
todo("Favoriting UI + save")
todo("Award for best bonus word")
todo("Change layout to make awards more central")
todo("Suppress awards while notifications pending")

let prev_xp
let prev_level
let new_xp

// Cycle through the award stages. See `STAGE`
let stage

/* Stage from the previous frame, used for detecting stage
   changes to play sounds */
let prev_stage

let first_frame_this_stage

let selection_index = 0
const STATS_BUTTON_INDEX = 1

def level_up():
    play_sound(award_sound, false, ∅, 90%, 150%)
    todo("Unlock abilities")
    todo("Spawn notifications")


/* Draw and animate Awards (Summary, Longest, Best Word, Best rare, High Score, Most Words) */
def draw_awards()
& preserving_transform:
    set_transform(xy(SCREEN_SIZE.x - GLOBAL_LAYOUT.LEADERBOARD.WIDTH + 35, 34))
    if stage ≠ prev_stage and mode_frames > 10:
        play_sound({sound: word_sound, pan: xy(0, 0)})

    if stage == STAGE.SUMMARY:
        draw_award_summary()
   
    else if stage == STAGE.BEST_WORD:
        draw_word_award("Best Word", best_word_winner)
   
    else if stage == STAGE.LONGEST:
        draw_word_award("Longest", longest_winner)
        
    else if stage == STAGE.BEST_RARE:
        draw_word_award("Best Rare", best_rare_winner)
    
    else if stage == STAGE.MOST_WORDS:
        draw_most_words_award(most_words_winner)



/* Called from `draw_awards()` when `stage` == `STAGE.SUMMARY` */
def draw_award_summary()
& preserving_transform:
    
    const highlight_color = #E1B    

    const frames = mode_frames - first_frame_this_stage
    const flash = (⌊frames / 15⌋ mod 2) and (player.score > 0)
    const XP_ANIMATION_DELAY_FRAMES = 150
    if frames == XP_ANIMATION_DELAY_FRAMES + 10 and player.score > 0:
        play_sound(xp_sound, false, ∅, 90%, ∅, 0, 70%)
        
    if frames < XP_ANIMATION_DELAY_FRAMES + 10 and frames mod 30 == 0:
        play_sound({sound: word_sound, pan: 100%, pitch: 150%})
    
    const XP_ANIMATION_RATE = 1 / 120
    
    // *Currently shown* XP and level, interpolated for animation
    const τ = clamp((frames - XP_ANIMATION_DELAY_FRAMES) * XP_ANIMATION_RATE, 0%, 100%)
    const xp = round(lerp(prev_xp, new_xp, τ))
    const level = xp_to_level(xp)
    const xp_lo = level_to_xp(level)
    const xp_hi = level_to_xp(level + 1)
    
    if frames > 1 and (draw_award_summary.last_level_displayed ≠ level):
        level_up()
    
    draw_corner_rect(xy(-35, -36), xy(GLOBAL_LAYOUT.LEADERBOARD.WIDTH, 63), player.avatar.color)
    draw_award_summary.last_level_displayed = level
    
    const shadow = 70% player.avatar.color

    // Flash and turn pink on level up
    draw_text({
        color:   if level ≠ prev_level and flash then highlight_color else #FFF,
        shadow:  shadow,
        outline: if level ≠ prev_level and flash then #FFF else ∅,
        font:    history_font,
        text:    "Level " + level,
        pos:     xy(-14, -27)})
        
    avatar_draw_large(player.avatar, xy(-14, -6), false, #FFF, shadow)
  
    const args = {
        font: history_font,
        x_align: "left",
        y_align: "baseline",
        shadow: shadow,
        color: #FFF}

    // Score
    compose_transform(xy(70, -24))
    draw_text({ …args, text: format_number(player.score, "commas") + " {font:leaderboard_font pts}", font: score_font, pos: xy(28, 2), x_align: "right", markup: true})

    const x = -56
    draw_text({…args, text: "Rare Words", pos: xy(x, 14)})
    draw_text({…args, text: player_competitor.num_rare, pos: xy(30, 14), x_align: "right"})

    // draw_text({…args, text: "Longest", pos: xy(x, 24)})
    // draw_text({…args, text: player_competitor.longest_text, font: history_font, pos: xy(30, 24), x_align: "right"})

    const xp_color   = if frames < XP_ANIMATION_DELAY_FRAMES and flash then highlight_color else #FFF
    const xp_outline = if frames < XP_ANIMATION_DELAY_FRAMES and flash then #FFF else ∅
    draw_text({…args, text: "XP Earned",              pos: xy(x,  34), color: xp_color, outline: xp_outline})
    draw_text({…args, text: "+" + (new_xp - prev_xp), pos: xy(30, 34), color: xp_color, outline: xp_outline, x_align: "right"})

    // XP bar outline
    const xp_rect = {corner: xy(x, 39), size: xy(GLOBAL_LAYOUT.LEADERBOARD.WIDTH - x - 108, 10)}
    draw_corner_rect(xp_rect.corner + xy(0, 1), xp_rect.size, ∅, shadow)

    // Progress bar
    const α = clamp((xp - xp_lo) / (xp_hi - xp_lo), 0%, 100%)
    draw_corner_rect(
        xp_rect.corner + 1,
        xy(α * (xp_rect.size.x - 2), xp_rect.size.y - 2), 
        if frames < XP_ANIMATION_DELAY_FRAMES and not flash then #000 else #E1B)
    
    draw_text({…args, shadow: #0008, font: history_font, text: format_number(xp, "commas") + " XP", x_align: "right", pos: xp_rect.corner + ½ xp_rect.size + xy(17, 2)})
    draw_corner_rect(xp_rect.corner, xp_rect.size, ∅, #FFF)
    


def maybe_player_award_sound(winner):
    if player_competitor == winner and stage ≠ prev_stage:
        play_sound(award_sound)



/* Used for best_word, longest, The title is used to compute the field */
def draw_word_award(title, winner):
    maybe_player_award_sound(winner)
        
    const field = replace(lowercase(title), {" ": "_"})
    const text = winner[field + "_text"]
    if not text: return
        
    draw_award_background({corner: xy(-35, -24), size: xy(69, 37)}, field, winner.avatar.color)

    draw_text({font: history_font, text: title + "!", color: player.board.selection_color, shadow: #000, pos: xy(0, -29), z: 2})
    draw_text({font: history_font, text: "→", color: player.board.selection_color, shadow: #000, pos: xy(40, -29), z: 2})
    
    avatar_draw_large(winner.avatar, xy(0, -5), false, ∅, ∅, true)
    
    if winner == player_competitor or not offensive[lowercase(text)]:
        board_select_word(player.board, text)
        board_draw_mini(player.board, xy(SCREEN_SIZE.x - 32, 36))



def draw_award_background(rect, field, color)
& preserving_transform:
    
    draw_corner_rect(rect.corner, rect.size, color)
    let badge_background = BADGE_TABLE[field]
    for i < 4:
        badge_background += badge_background
    for i < 2:
        badge_background += "\n" + badge_background
    
    const badge_color = 90% color
    set_clip(transform_cs_to_ss(rect.corner), rect.size)
    draw_text({font: leaderboard_font, color: badge_color, text: badge_background, pos: xy(-36, -26), y_align: "top", x_align: "left"})



def draw_most_words_award(winner):
    maybe_player_award_sound(winner)
    ++draw_most_words_award.frames
    player.board.selection_color = #E1B

    draw_text({font: history_font, text: "Most Words: " + size(winner.word_list), color: player.board.selection_color, shadow: #000, pos: xy(0, -29), z: 2})
    draw_award_background({corner: xy(-35, -24), size: xy(69, 37)}, "most_words", winner.avatar.color)
    avatar_draw_large(winner.avatar, xy(0, -5), false, player.board.selection_color, ∅, true)

    let word
    // Find a non-offensive word, but give up after four tries instead of locking up
    for i < 4:
        word = array_value(winner.word_list, (draw_most_words_award.frames / MOST_WORDS_AWARD_FRAMES_PER_WORD) + draw_most_words_award.skip, "loop")
        if winner ≠ player_competitor and offensive[lowercase(q_decode(word))]:
            // Skip over this word
            ++draw_most_words_award.skip
            
    if winner == player_competitor or not offensive[lowercase(q_decode(word))]:
        board_select_word(player.board, word)
        board_draw_mini(player.board, xy(SCREEN_SIZE.x - 32, 36))



/* Draw the ranked competitors and perform UI logic */
def draw_leaderboard()
& preserving_transform:
    todo("Scroll")
    
    set_clip(xy(SCREEN_SIZE.x - GLOBAL_LAYOUT.LEADERBOARD.WIDTH, 0), xy(GLOBAL_LAYOUT.LEADERBOARD.WIDTH, SCREEN_SIZE.y - 22))
    set_transform(xy(SCREEN_SIZE.x - GLOBAL_LAYOUT.LEADERBOARD.WIDTH, 72))
    
    draw_text({text: "Global Leaderboard", pos: xy(½ GLOBAL_LAYOUT.LEADERBOARD.WIDTH, -4), x_align: "center", font: leaderboard_font, color: #E1B, shadow: #000})
    
    // Alternating animation frames for avatar idle animations
    const alt = ⌊mode_frames / 30⌋ mod 2
    for competitor at i in competitor_array:
        // Center of avatar
        const pos = xy(0, i * GLOBAL_LAYOUT.LEADERBOARD.ROW_SPACING + 11)
                
        const me = (competitor == player_competitor)
        
        const friend = competitor_is_friend(competitor)
        
        // Highlight
        const highlight_color = if friend then lerp(competitor.avatar.color, #333, 75%) else (if me then competitor.avatar.color else ∅)
        draw_corner_rect(pos - xy(0, 9), xy(GLOBAL_LAYOUT.LEADERBOARD.WIDTH, 18), highlight_color, ∅, ∅, -1)
            
        // Animate sprite
        let sprite = competitor.avatar.sprite
        
        if alt: 
            sprite = sprite_transfer_orientation(sprite, sprite.spritesheet[sprite.tile_index.x][sprite.tile_index.y + 1])
        
        const text_args = {
            font: leaderboard_font,
            shadow: if me then 60% competitor.avatar.color else ∅,
            x_align: "left",
            color: if me or friend then #FFF else #999}
        
        if friend:
            draw_text({…text_args,
                pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.AVATAR_X - 14, 0),
                text: "♥"})
                
        draw_sprite(sprite.x_flipped, pos + xy(GLOBAL_LAYOUT.LEADERBOARD.AVATAR_X, 0))
        
        draw_text({…text_args,
            text: competitor.avatar.level,
            font: history_font,
            x_align: "right",
            pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.AVATAR_X + 17, 1),
            color: if me then #FFF else competitor.avatar.color})
            
        draw_text({…text_args,
            text: competitor.avatar.name,
            pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.NAME_X, 0),
            color: if me then #FFF else competitor.avatar.color})
        
        const badges = competitor.badges
        if size(badges) > 2:
            draw_text({…text_args,
                text: slice(competitor.badges, 0, 2),
                pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.BADGE_X, 0 alt - 1 - 4)})
            draw_text({…text_args,
                text: slice(competitor.badges, 2),
                pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.BADGE_X, 0 alt - 1 + 4)})
                
        else if size(badges) > 0:
            draw_text({…text_args,
                text: competitor.badges,
                pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.BADGE_X, 0 alt - 1)})
            
        draw_text({…text_args, text: format_number(competitor.score, "commas"), pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.SCORE_X, 0), x_align: "right"})
        draw_text({
            …text_args, 
            font: history_font, 
            text: if competitor == player_competitor then competitor.text else censor(competitor.text), 
            x_align: "right", 
            pos: pos + xy(GLOBAL_LAYOUT.LEADERBOARD.WIDTH - 2, 0)})



def update_countdown():
    const time_left = max(end_time - frame_utc_now, 0)
    const timer_pos = xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - 10)
    const α = clamp(100% - time_left / (if game_type == SOLO then SOLO_INTERMISSION_TIME else GLOBAL_INTERMISSION_TIME), 0%, 100%)
    
    const countdown_rect = {
        corner: xy(32, timer_pos.y - 10),
        size: xy(SCREEN_SIZE.x - 64, 20)}
        
    draw_corner_rect(countdown_rect.corner, countdown_rect.size, #000, #FFF)
    draw_corner_rect(countdown_rect.corner + 1, xy(α * (countdown_rect.size.x - 2), countdown_rect.size.y - 2), #0F0)
    
    todo("Shrink countdown")
    draw_text({
        font: score_font,
        text: "Next match in " + format_number(time_left, "timer"),
        outline: #090,
        pos: timer_pos + xy(0, 1),
        color: #FFF})
    
    if frame_utc_now ≥ end_time and not DEBUG_INTERMISSION:
        set_mode(GenerateBoard) because "Timer"
    
    

pop_mode from DisplayStats
────────────────────────────────────────────────────────────────────────
selection_index = 0



enter
────────────────────────────────────────────────────────────────────────
set_background(#333)
selection_index = 0

prev_xp = player.stats.lifetime.xp + player.stats[today_date_string()].xp
prev_level = player.avatar.level
if not DEBUG_INTERMISSION:

    stats_update(player.stats, player_competitor, joined_late)
    new_xp = player.stats.lifetime.xp + player.stats[today_date_string()].xp
    // Update level
    player.avatar.level = xp_to_level(new_xp)
    
    todo("**Grant any missing abilities**")
    todo("**Level progression: Announce upgrades with popup system**")
    stats_save(player.stats)
    save_local(player.has_ability)
else:
    // Debugging, force a level up
    new_xp = level_to_xp(player.avatar.level + 1) + 100
    player.avatar.level = xp_to_level(new_xp)
    

// Used to animate which word is being shown
draw_most_words_award.frames = 0

// Used to skip over offensive words
draw_most_words_award.skip = 0

end_time = next_global_game_utc_start_time()

if player.avatar.level ≠ prev_level:
    // Leveling up, start on the summary/level up display
    stage = STAGE.SUMMARY
else:
    stage = 0


prev_stage = stage
first_frame_this_stage = 0


frame
────────────────────────────────────────────────────────────────────────

// Cycle through awards, giving equal time to each
if game_type == GLOBAL or DEBUG_INTERMISSION:
    prev_stage = stage
    stage = min(⌊size(STAGE) * mode_frames / (60 GLOBAL_INTERMISSION_TIME)⌋, size(STAGE) - 1)

    if player.avatar.level ≠ prev_level:
        // Leveling up, so cycle around the order to put the summary stage first
        stage = (stage + STAGE.SUMMARY) mod size(STAGE)
        
    if stage == STAGE.MOST_WORDS2 or stage == STAGE.SUMMARY2:
        // These are 2x as long
        --stage
    if prev_stage ≠ stage:
        first_frame_this_stage = mode_frames

// Separator bars
draw_corner_rect(xy(SCREEN_SIZE.x - GLOBAL_LAYOUT.LEADERBOARD.WIDTH - 2, 0), xy(2, SCREEN_SIZE.y), #000, ∅, -1)
draw_corner_rect(xy(SCREEN_SIZE.x - GLOBAL_LAYOUT.LEADERBOARD.WIDTH, 61), xy(GLOBAL_LAYOUT.LEADERBOARD.WIDTH, 2), #000, ∅, 20)
draw_corner_rect(xy(0, SCREEN_SIZE.y - 22), xy(SCREEN_SIZE.x, 2), #000, ∅, -1)

const history_rect = {corner: xy(1, 1), size: xy(SCREEN_SIZE.x - GLOBAL_LAYOUT.LEADERBOARD.WIDTH - 2, SCREEN_SIZE.y - 22)}
history_update(player.history, history_rect)

// Show the board so that it can appear in screenshots
const α = max(0%, 100% - max(mode_frames - 360, 0) / 90)
if stage == STAGE.SUMMARY and α > 0%
& preserving_transform:
    set_transform(history_rect.corner + history_rect.size - xy(42, 48))
    const history_tile_color = rgba(0.8, 0.8, 0.8, α)
    const history_board_color = rgba(0, 0, 0, α)
    for x < COLS:
        for y < ROWS:
            const tile = player.board.tile[x][y]
            const letter = if tile.letter == "Q" then "Qu" else tile.letter
            const pos = 11 xy(x, y)
            draw_disk(pos, 5, history_tile_color)
            draw_text({
                font: history_font, 
                pos: pos,
                text: letter,
                color: history_board_color})

draw_text({
    font: history_font, 
    pos: history_rect.corner + history_rect.size - xy(5, 2),
    text: "Found " + size(player.history.list) + "/" + player.board.word_count,
    x_align: "right",
    y_align: "bottom",
    outline: #333,
    color: #CCC})
    
draw_awards()

draw_leaderboard()

if player.has_ability["Stats Tracker"]:
    const region = {pos: xy(16, SCREEN_SIZE.y - 10), size: 10 * xy(2, 2), shape: "disk"}
    if touch.hover:
        selection_index = if overlaps(touch.hover, region) then STATS_BUTTON_INDEX else 0
    else if player.using_gamepad:
        selection_index = 0
        draw_text({font: leaderboard_font, pos: region.pos + xy(-12, 4), text: joy.prompt["(q)"], color: #DDD, outline: #000, z: 10})
            
    draw_stats_button(region.pos, selection_index == STATS_BUTTON_INDEX, ½ region.size.x)
    
    if (touch.pressed_a and overlaps(touch.xy, region)) or joy.pressed_q:
        push_mode(DisplayStats) because "Button"

// Countdown
update_countdown()

