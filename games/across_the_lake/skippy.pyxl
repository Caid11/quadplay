/* The stone is named "skippy". This is the code for its simulation. 


   This code predates Reference constants and loading CSV files in quadplay.
   If we were to write it today all of the parallel arrays would be loaded from
   a data file as a table instead.
*/

// Good bounce
const SPLASH_PERFECT = 0
const SPLASH_TINY = 1
const SPLASH_SMALL = 2
const SPLASH_MEDIUM = 3
// Bad bounce
const SPLASH_BIG = 4

const SPLASH_SOUNDS = [
    SFXSPLASH1,
    SFXSPLASH2,
    SFXSPLASH4,
    SFXSPLASH5]
    
// penalties
const splash_types = [
   SPLASH_PERFECT,
   SPLASH_TINY,
   SPLASH_SMALL,
   SPLASH_MEDIUM,
   SPLASH_BIG]

const bounce_angle_change = [
    0°,
    1°,
    3°,
    6°,
    10°]

const speed_lerp_penalty = [
    1.0,
    0.6,
    0.3,
    0.1,
   -0.3]    
    
let last_splash = ∅

let skippy_position = xy(0, 0)
let skippy_velocity = xy(0, 0)
let gravity = xy(0, -0.03)
let skippy_hit_water_this_frame = ∅
let skippy_splash_type = SPLASH_BIG
let launch_angle = 15° 
let skippy_angle = launch_angle

let last_position = skippy_position
let last_press = ∅
let last_hit_water = ∅

let times_skipped = 0
let last_travelled = 0
let total_travelled = 0


   
let PENALTY_WINDOW = 3
let MAX_FRAMES_UNDERWATER = 12


def reset_skippy():
    skippy_position = xy(cam_pos.x - 200, random(15, 25)) 
    skippy_velocity = xy(3.5, 1.8)//xy(random(2.5, 3.5), random(0.1, 1.5))
    launch_angle = 28 deg //random(12 deg, 18 deg)
    skippy_angle = launch_angle
    last_press = nil
    times_skipped = 0


def short_vec(v):
    return unparse(v.x) + ", " + v.y


def compute_hit_time(loc, vel, acc):
    let det = (vel.y²) - (4 acc.y * loc.y)

    let result = (-vel.y + sqrt(det)) / (2 loc.y)
    //debug_print(result)

    return result


def skippy_underwater_behavior():
    let frames_under_water = mode_frames - skippy_hit_water_this_frame

    //debug_print(frames_under_water)

    if frames_under_water > MAX_FRAMES_UNDERWATER:
        game_over()

    if last_press == ∅ and not DEBUG_ALWAYS_BOUNCE:
        return

    let penalty_index = 4
    if DEBUG_ALWAYS_BOUNCE:
        penalty_index = 0
    else:
       const window = if magnitude(skippy_velocity) < 2.2 then 2 else PENALTY_WINDOW
       penalty_index = floor(|skippy_hit_water_this_frame - last_press| / window)

    penalty_index = min(penalty_index, size(speed_lerp_penalty) - 1)
    let penalty_angle_change = bounce_angle_change[penalty_index]
    if last_press > skippy_hit_water_this_frame:
       penalty_angle_change *= -1.0 


    let speed_lerp = speed_lerp_penalty[penalty_index]
    let fall_angle = atan(skippy_velocity)
    let current_speed = magnitude(skippy_velocity)
    let physics_bounce_speed = current_speed * cos(-fall_angle + skippy_angle)
    let adjusted_new_speed = lerp(physics_bounce_speed, current_speed, speed_lerp)
    
    skippy_velocity = xy(cos(skippy_angle), sin(skippy_angle)) * adjusted_new_speed
    skippy_angle = launch_angle + penalty_angle_change
    
    skippy_splash_type = splash_types[penalty_index]
    
    ++times_skipped

    //play_sound(SPLASH_SOUNDS[penalty_index])


def update_skippy_momentum_only():
    skippy_position += skippy_velocity // px/f
    skippy_velocity *= 95% // px/f/f
    skippy_velocity = lerp(skippy_velocity, xy(0.0, -0.5), 0.05)


def update_skippy():
    if mode_frames - last_press > 30:
       last_press = ∅
    if any_button_press() or touch.pressed_a:
        if last_press == nil or mode_frames - last_press > 30:
            last_press = mode_frames
            let this_splash = random_value(SPLASH_SOUNDS)
            while this_splash == last_splash:
                this_splash = random_value(SPLASH_SOUNDS)
            last_splash = this_splash

    last_position = clone(skippy_position) // px

    // hit the water surface this frame
    if (
            sign(skippy_position.y) < 0 
            and sign(skippy_velocity.y) < 0
            and skippy_hit_water_this_frame == ∅
    ):
        skippy_hit_water_this_frame = mode_frames
        if last_splash:
            play_sound(last_splash)

    if sign(skippy_position.y) < 0:
        skippy_underwater_behavior()

        if magnitude(skippy_velocity) < 1.0:
            game_over()

        // clear the last press
        last_press = nil
        skippy_position += skippy_velocity // px/f
    else:
        skippy_hit_water_this_frame = ∅
        skippy_position += skippy_velocity // px/f
        skippy_velocity += gravity // px/f/f



def game_over():
    let distance = (skippy_position.x - last_travelled) / 100
    last_travelled = skippy_position.x
    total_travelled += distance
    set_mode(GameOver, times_skipped, distance, total_travelled) because "Sank"
