/*
This framework shows how to ray cast in the style of DOOM 
directly from a TMX map. The core technique requires that walls
are perpendicular to the floor and that shading is based on depth.

It can be adapted in several ways within those limitations:

- Multiple elevations and stairs by clipping the 
  horizontal spans drawn and tracing multiple layers
- Walls that are not axis aligned in XZ 
- Animated doors by explicitly tracing additional "walls" 
  that rotate or translate
- Alpha masks on walls (or floors) by continuing the trace
  when the wall sprite hit has a some non-1 values in its
  alpha channel
- Fog, using a white override_color and "lerp" instead 
  of "multiply"

Many of those need a more sophisticated, non-TMX source map that
can represent thin and angled walls.
*/


def make_view(map):
    const view = {
        // "D-PAD", "DUAL D-PAD", "DUAL ANALOG", "MOUSE"
        control_scheme: "D-PAD",
            
        pos: xyz(½ map.size.x * map.sprite_size.x, 60% map.sprite_size.y, ½ map.size.y * map.sprite_size.y),
        
        // Yaw 180° = looking north along the -z axis, increases
        // to the left
        yaw: 180°,
        
        // Pitch 0° = horizontal, increases tilt up. In this program it is approximated
        // by shearing instead of tilting the rays
        pitch: 0°,
        
        // For movement collision
        radius: 16,
        
        speed: xz(0, 0),
        spin: xy(0°, 0°),
        
        jump_vel: 0,
        
        z_near: -4,
        z_far: -64 * 4,
        
        // Edge to edge. This number must match the size of 
        // the background image unless it is scaled.
        horizontal_fov: 75°
    }
    
    // Two common constants for raster and ray casting (inverses)
    view.perspective_constant = -SCREEN_SIZE.x / (2 tan(½ view.horizontal_fov))
    view.eye_ray_constant     = 2 tan(½ view.horizontal_fov) / SCREEN_SIZE.x

    return view
    
// Range compression on z values
const VS_TO_CS_Z = 0.1
const FLOOR_LAYER = 0
const WALL_LAYER = 1
const CEILING_LAYER = 2


// Forward vector for the camera
def ws_forward(view):    
    // Transform from camera space to world space
    return xyz(sin(view.yaw), 0, cos(view.yaw))


// Returns the world-space ray through the given pixel.
// Pixel should be an integer + ½ for a pixel center.
// Assumes that (0, 0) is the center of the screen.
// Returns the ray, re-using the passed in one
def ws_eye_ray(view, pixel, ray default {pos: xyz(0, 0, 0), dir: xyz(0, 0, 0), t_min: 0, t_max: 0}):
    // Compute the normalized side of a square at z=-1 based on our 
    // field of view; the result is negative because of 
    // our convention to have the image plane on the
    // negative axis
    const side = view.eye_ray_constant 
    
    // Compute the point on the image plane
    ray.dir.x = MUL(side, pixel.x)
    ray.dir.y = MUL(side, pixel.y)
    ray.dir.z = -1
                      
    // Normalize in place
    XYZ_DIRECTION(ray.dir, ray.dir)
    
    // Transform from camera space to world space
    const c = cos(view.yaw)
    const s = sin(view.yaw)
    
    const dir_x = ray.dir.x
    const dir_z = ray.dir.z
    
    // Reuse the existing dir object to reduce memory allocation
    ray.dir.x = SUB(0, MAD(c, dir_x, MUL(s, dir_z)))
    ray.dir.z = SUB(MUL(s, dir_x), MUL(c, dir_z))

    ray.pos.x = view.pos.x
    ray.pos.y = view.pos.y
    ray.pos.z = view.pos.z
    ray.t_min = DIV(view.z_near, dir_z)
    ray.t_max = DIV(view.z_far, dir_z)
    ray.d_cs_z = dir_z
    
    return ray


// Returns the intersection point or ∅ if there is not one
def ray_horizontal_plane_intersection(ray, y):
    const t = DIV(SUB(y, ray.pos.y), ray.dir.y)
    
    // If the above is NaN, these tests will still work correctly
    return if t ≥ ray.t_min and t ≤ ray.t_max then t else ∅


// Return the distance darkening factor for a 3D camera-space 
// z value
def get_shade(z, shade, mul default 1):
    const k = mul * clamp(MAD(z, 0.00476, 150%), 0%, 100%)³
    shade.r = k; shade.g = k; shade.b = k;


def draw_floor_and_ceiling(view, map):
    const left = xy(½ - ½ SCREEN_SIZE.x, 0)
    const right = xy(½ SCREEN_SIZE.x - ½, 0)
    const override_color = rgba(1, 1, 1, 0)
    
    // Preallocate the rays
    const lt_ray = ws_eye_ray(view, left)
    const rt_ray = ws_eye_ray(view, right)
    
    const span_size = xy(SCREEN_SIZE.x, 0)
    
    const pitch_shear = SCREEN_SIZE.y - get_transform().pos.y
    for (½ - pitch_shear) ≤ y ≤ pitch_shear + SCREEN_SIZE.y:
        left.y = y
        right.y = y
        
        // Primary rays through the centers of the pixels at each edge
        ws_eye_ray(view, left, lt_ray)
        ws_eye_ray(view, right, rt_ray)
        
        const Y_PLANE = if y < 0 then 0 else map.sprite_size.y
        
        // Distance along the ray to the ground at the left edge
        const edge_t = ray_horizontal_plane_intersection(lt_ray, Y_PLANE)
        
        // No intersection on this scanline 
        if edge_t == ∅: continue
    
        // Compute the camera space z of this scanline on the ground
        // plane
        const z = MUL(lt_ray.d_cs_z, edge_t)
        if z < view.z_far: continue
        const cs_z = MUL(z, VS_TO_CS_Z)
        
        // Distance darkening
        get_shade(z, override_color)
        if override_color.r < 8%: continue
    
        // Intersection points at left and right edges in map coordinates
        const min_point = xz_to_xy(lt_ray.pos + lt_ray.dir * edge_t) / map.sprite_size
        const max_point = xz_to_xy(rt_ray.pos + rt_ray.dir * edge_t) / map.sprite_size
    
        const MAP_LAYER = if y < 0 then FLOOR_LAYER else CEILING_LAYER
        draw_map_span(left, span_size, map, min_point, max_point, MAP_LAYER, MAP_LAYER + 1, ∅, cs_z, override_color, "multiply", true)



def draw_minimap(view, map) preserving_transform:
    const corner = xy(10, 1)
    const extent = xy(36, 36)
    set_transform(corner + ½ extent, xy(1, 1))
    draw_rect(xy(0, 0), extent + 2, #2, #578, ∅, 101)
    set_camera({pos: xz_to_xy(view.pos), angle: 180° + view.yaw, zoom: 10%})
    draw_disk(xz_to_xy(view.pos), view.radius, #ff0, #000, 105)
    set_clip(corner, extent)
    draw_map({map: map, min_layer: 0, map_layer: 1, z: 102})
    


def perspective_scale(view, vs_z):
    return DIV(view.perspective_constant, vs_z)


// Sprite callback for draw_walls
def wall_intersector(sprite, sprite_pixel_coord, ws_normal, ray, map, distance, ws_coord, map_coord):
    return {
        sprite: sprite, 
        ws_distance: distance,
        ws_normal2D: ws_normal,        
        x: (if ws_normal.x then sprite_pixel_coord.y else sprite_pixel_coord.x)
    }


def draw_walls(view, map) preserving_transform:
    // Preallocate all memory outside of the loop
    const clip_pos = xy(0, 0)
    const clip_size = xy(1, SCREEN_SIZE.y)
    const shade = rgb(1, 1, 1)
    const scale = xy(1, 1)
    const pixel = xy(-½ - ½ SCREEN_SIZE.x, 0)
    const sprite_pos = xy(0, 0)
    
    const ray2D = {
        pos: xy(0, 0),
        dir: xy(0, 0),
        length: 0
    }
    
    const ray3D = {
        pos: xyz(0, 0, 0),
        dir: xyz(0, 0, 0)
    }
    
    // All sprites are the same size, so precalculate
    const half_sprite_size = ½ map.sprite_size.x
    
    set_clip(clip_pos, clip_size)
    
    for 0 ≤ x < SCREEN_SIZE.x:
        ++pixel.x

        // Generate the ray through the pixel center
        ws_eye_ray(view, pixel, ray3D)
        
        // Copy the 3D ray into a 2D ray for tracing
        ray2D.pos.x = ray3D.pos.x; ray2D.pos.y = ray3D.pos.z
        ray2D.dir.x = ray3D.dir.x; ray2D.dir.y = ray3D.dir.z
        ray2D.length = ray3D.t_max
    
        const hit = ray_intersect_map(ray2D, map, WALL_LAYER, wall_intersector, ∅)        

//        ++pixel.x
        if hit:
            // Compute the 3D vs_z and 2D cs_z
            const vs_z = MUL(ray3D.d_cs_z, hit.ws_distance)
            const cs_z = MUL(vs_z, VS_TO_CS_Z)
            
            // Shade by distance and orientation
            get_shade(vs_z, shade, if hit.ws_normal2D.x then 65% else 100%)
                        
            // Compute the vertical scale from vs_z
            scale.y = perspective_scale(view, vs_z)
            // Horizontal scale doesn't matter, but 
            // we make it the same as vertical for simplicity
            scale.x = scale.y
            
            // Draw the sprite strip, using the clipping
            // region to restrict it to one pixel wide. The sprite
            // is always centered at y=0 and we don't bother restricting
            // the clipping region vertically.
            clip_pos.x = x
            set_clip(clip_pos)
            sprite_pos.x = MAD(SUB(half_sprite_size, hit.x), scale.x, pixel.x)
            sprite_pos.y = MUL(SUB(half_sprite_size, view.pos.y), scale.y)
            draw_sprite(hit.sprite, sprite_pos, 0, scale, 100%, cs_z, shade, "multiply")
                    


def draw_billboard(view, sprite, pos_ws3D, sprite_scale default 100%):
    // Transform to camera space
    const c = cos(view.yaw)
    const s = sin(view.yaw)
    const temp = pos_ws3D - view.pos
    const pos_vs = xyz(-c * temp.x + s * temp.z, temp.y, -s * temp.x - c * temp.z)

    // Frustum cull
    if pos_vs.z ≥ 0 or pos_vs.z < view.z_far: return
    
    const shade = rgb(1, 1, 1)
    get_shade(pos_vs.z, shade)

    const scale = perspective_scale(view, pos_vs.z)
    draw_sprite({
        sprite: sprite,
        pos: xy(pos_vs) * scale,
        scale: xy(scale, scale) * sprite_scale,
        z: min(0, VS_TO_CS_Z * pos_vs.z + 8),
        override_blend: "multiply",
        override_color: shade})
    
        
        
// Moves the entity.pos along entity.vel, sliding it along
// the nonempty sprites in map[layer].
def entity_slide_move_map(entity, map, layer) preserving_transform:
    // Map cells have integer coordinates at their centers
    const half_cell = ½ map.sprite_size

    // Bounds on everywhere the entity could be in map coordinates.
    // Because integers are map cell centers
    const map_lo = ⌊transform_ws_to_map_space(map, entity.pos - ½ entity.size + min(entity.vel, xy(0, 0)))⌋
    const map_hi = ⌊transform_ws_to_map_space(map, entity.pos + ½ entity.size + max(entity.vel, xy(0, 0)))⌋

    // The mathematically elegant way to solve this problem is to 
    // sweep the disk through collision with all nearby edges in
    // the map. To perform the swept disk, convert each edge into a
    // capsule and collide a ray with it. The capsule itself is in
    // turn two disks with an oriented line segment between them
    // (since the other side of the capsule cannot be hit).
    //
    // However, for the specific case of walls that are only axis
    // aligned and small velocities, we can simply test moving in each
    // axis independently and collide with walls as if they were entities    


    // Debug visualization on the minimap   
    if false:
        const corner = xy(10, 1)
        const extent = xy(36, 36)
        set_transform(corner + ½ extent, xy(1, 1))
        set_camera({pos: xz_to_xy(view.pos), angle: 180° + view.yaw, zoom: ¼})

    
    // Every tile that we could possibly hit
    const wall_array = []
    for map_lo.x ≤ map_x ≤ map_hi.x:
        for map_lo.y ≤ map_y ≤ map_hi.y:
            if map.layer[layer][map_x][map_y]:
                // Create an entity at the location of this wall
                
                // Integer map coords are at the corners, so place
                // the wall entity centered by offsetting the map coord
                const wall = {
                    shape: "rect",
                    size: map.sprite_size,
                    scale: xy(1, 1),
                    pivot: xy(0, 0),
                    angle: 0°,
                    pos: transform_map_space_to_ws(map, xy(map_x, map_y) + ½)
                }

                // Debug visualization on the minimap   
                if false:
                    draw_sprite(map.layer[layer][map_x][map_y], wall.pos, ∅, ∅, ∅, 300, #F00C)
        
                // Ignore this wall if it is already creating
                // a collision and velocity is trying to move away 
                // from it so that we can escape
                if dot(wall.pos - entity.pos, entity.vel) ≤ 0 or not overlaps(wall, entity):
                    push(wall_array, wall)


    if size(wall_array) == 0:
        // Nothing to hit (a common case)
        entity.pos += entity.vel
        return
    
    // If we expected large velocities
    // compared to the size of the map cells, then
    // we would alternate between axes in smaller steps
    // and on failure would binary search for the largest
    // successful step. Given that this game example moves
    // slowly compared to the sizes, we just take one large
    // step
    for axis in "xy":
        const old = entity.pos[axis]
        entity.pos[axis] += entity.vel[axis]
        for wall in wall_array:
            if overlaps(entity, wall):
                // Fail! Undo. 
                entity.pos[axis] = old
                break


