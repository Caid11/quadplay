Play
════════════════════════════════════════════════════════════════════════

const POINT_GRID_SIZE = xy(50, 50)
const SPACING = 50
const POINT_RADIUS = 10

const POINTS = []
for x < POINT_GRID_SIZE.x:
    for y < POINT_GRID_SIZE.y:
        push(
            POINTS,
            make_entity(
                {
                    pos: xyz(
                        SPACING * (xy(x, y) - (POINT_GRID_SIZE - 1) / 2),
                        0
                    ),
                    radius: POINT_RADIUS,
                    color: rgb(1,1,1),
                    name: "POINT_" + unparse(x) + "_" + unparse(y),
                    grid: xy(x,y),
                }
            )
        )

def perspective_zoom(cs_z):
    const clip_z = 6.5
    return clip_z / (clip_z - cs_z)

const CAMERA = make_entity(
    {
        pos: xy(0, 0),
        angle: 0,
        zoom: perspective_zoom,
        z: 10
    }
)


frame
────────────────────────────────────────────────────────────────────────

// lower right text
draw_text(
    font,
    "CAMERA.z: " + unparse(CAMERA.z),
    xyz(SCREEN_SIZE - xy(10, 10), 0),
    rgb(0,1,0),
    nil,
    rgb(0,0,0),
    "right",
    "bottom"
)

preserving_transform:
    // center indicator
    set_transform(SCREEN_SIZE / 2)
    draw_disk(xyz(0, 0, 0), 10, nil, rgb(0,1,0))
    draw_disk(xyz(0, 0, 0), 3, rgb(0,1,0), rgb(0,0,0))
    draw_text(
        font,
        "screen center",
        xyz(0, 12, 0),
        rgb(0,1,0),
        nil,
        rgb(0,0,0),
        "center",
        "top"
    )
    
    CAMERA.z += gamepad_array[0].y

    set_camera(CAMERA)

    for point in POINTS:
        draw_disk(point)
