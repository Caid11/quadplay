
/* Constructs a new player with an uninitialized board */
def make_player():
    
    // Capture the player variable for the argument-less callback
    def selection_change_callback():
        return player_selection_change_callback(player)
    
    
    const player = {
        board: make_board(),
        
        score: 0,
        
        gamepad: gamepad_array[0],
        
        // Due to finger on history
        drag_start: {
            // Position at which the current drag started,
            // ∅ if not in a drag
            pos: ∅,
            
            // history.scroll when the drag started
            scroll: ∅
        },
                
        // Q-encoded upper case words that have already been found
        // and are represented in history.list
        already_found: {},
        
        // Used for display.
        history: {
            // Each entry is {text, word, tiles, points, color, emphasize_frame, pos}.
            // `pos` is computed as a side effect of draw history
            // `word` is Q-encoded, text may contain arbitrary characters
            list: [],
            
            // Auto computed and overriden on new word spawn or resize,
            // but can be manually affected by the player
            scroll: 0,

            // Scroll computation resets when screen size changes.
            // This was the size it was computed for.
            scroll_screen_size: xy(0, 0),
            
            // Scroll computation resets when the list size changes.
            // This was the size it was computed for.
            scroll_history_size: 0},
        
        selection_change_callback: selection_change_callback,
        
        // Determined by most recent input method.
        // Show button prompts and cursor when using gamepad
        using_gamepad: false}
    
    
    return player



/* Creates animation going from the selection to the last word in the history */
def player_spawn_score_animation(player):
    let target
    
    const board = player.board
    const color = last_value(player.history.list).color
    
    let letter_array = []
    let start_array = []
    for tile_index in board.selection:  
        const tile = board.tile[tile_index.x][tile_index.y]        
        push(start_array, xy(tile.pos))
        push(letter_array, q_decode(tile.letter))
    
    // Have to wait until callback time for this so that the 
    // target actually gets rendered and assigned a pos first
    def capture_target():
        const entry = last_value(player.history.list)
        target = entry.pos + xy(size(entry.word) * 4, 4)

    def callback(frames_left, total_frames):
        const α = linstep(total_frames, 0, frames_left)^1.5
        for i < size(letter_array):
            const pos = lerp(start_array[i], target, α)
            draw_disk(pos, ½ (TILE_EXTENT - 4) * (1 - α), color, ∅, 9)
            draw_text({font: score_font, x_align: "center", y_align: "center", text: letter_array[i], pos: pos, color: rgba(1, 1, 1, 1 - α³), z: 10})
        
    sequence({begin_callback: capture_target, callback: callback, frames: POINTS_ANIMATION_FRAMES})



/* Called by the board after changing selection. 
   Returns true if there was a new word. As a side effect,
   plays a sound and sets the state for visualizing the word
   if there is one. */
def player_selection_change_callback(player):

    const board = player.board
    const word = board_selected_word(board)
    const points = score_word(word)

    // Reset selection color
    board.selection_color = TILE_CENTER_SELECTED_COLOR
    
    if player.already_found[word]:
        
        // Show that we've already seen this word by 
        // finding and emphasizing it
        player_emphasize_history_word(player, word)
        play_sound(select_tile_sound, false, 150%, ∅, 40%)
        return true
                
    else if points > 0:
        // Score the word, even without the player releasing their touch
        const color = player_add_to_history(player, word, points)
                
        board.selection_color = color
        player_spawn_score_animation(player)
    
        const pitch = 75% + min(max(0, points - 6)^0.1, 3)
        _board_play_sound(word_sound, 100% + 10% pitch, pitch, last_value(board.selection))
    
        // Repeatly ding for 35 or more points
        for i ≤ (points - 35) / 10:
            delay(play_big_points_sound, 12 * i)
    
        return true


def play_big_points_sound():
    play_sound(big_points_sound)


/* Returns the color. Updates the score. Does not verify that the word has
   not been found previously */ 
def player_add_to_history(player, word, points):
    player.already_found[word] = true
    
    let color = color_for_points(points)
    
    let text_color = color
    let outline = ∅
    
    // Super scorer colors
    if points ≥ 65:
        outline = lerp(color, #FFF, 40%)
        text_color = #FFF
    else if points ≥ 45:
        outline = color
        text_color = #FFF
    else if points ≥ 35:
        outline = lerp(color, #000, 25%)
        text_color = lerp(color, #FFF, 50%)
    
    push(player.history.list, {
        text:    q_decode(word) + ": " + points, 
        word:    word,
        tiles:   size(word),
        emphasize_frame: 0,
        reveal_frame: game_frames + POINTS_ANIMATION_FRAMES,
        points:  points, 
        color:   text_color,
        outline: outline})
        
    player.score += points
    
    return color
    
    

/* Make this q-encoded word that is already in the history 
   appear emphasized for a few frames to make it obvious 
   to the player */
def player_emphasize_history_word(player, word, duration default 30):
    for entry in player.history.list:
        if entry.word == word:
            entry.emphasize_frame = game_frames + duration
            return
        
    assert(false, "Could not find " + word + " which should already be in history")



def _player_update_rotate_button(player, board_pos):
    let rotate_button_sprite = shapes.curved_arrow.rotated_270
    
    let rotate_button_pos = board_pos + xy(-4, -16) + xy(½, -½) board_pixel_size()
        
    draw_disk(rotate_button_pos, 8, ∅, #FFF)
    draw_sprite(rotate_button_sprite, rotate_button_pos + xy(1, 1), ∅, 38%)
    if player.using_gamepad:
        draw_text({font: tile_point_font, text: player.gamepad.prompt["(b)"], x_align: "right", pos: rotate_button_pos + xy(-6, 7), color: #FFF, outline: #000})

    if (touch.aa and overlaps({pos: rotate_button_pos, size: rotate_button_sprite.size}, touch.xy)) or joy.bb:
        push_mode(Rotate) because "Rotate button"


        
def _player_draw_score(player, board_pos):
    let score_pos = board_pos + xy(+½, -½) * board_pixel_size() - xy(40, 16)
        
    draw_text({
        pos: score_pos,
        font: score_font,
        text: format_number(player.score, "commas") + " pts",
        color: #FFF,
        y_align: "center",
        x_align: "right"})
    
    

/* Draws the count-down timer for `end_time` relative to the board */
def draw_timer(board_pos):  
    let clock_pos = board_pos + xy(-½, -½) * board_pixel_size() - xy(-28, 16)
    draw_text({
        pos: clock_pos,
        font: score_font,
        text: format_number(max(0, end_time - now()), "timer"),
        color: #FFF,
        y_align: "center",
        x_align: "right"})



/* Run UI for this player and draw their board */
def player_update(player, angle default 0°, allow_selection default false):
    // Track most recent UI method
    if touch.pressed_a:
        player.using_gamepad = false
    else if player.gamepad.aa or player.gamepad.bb or player.gamepad.dx or player.gamepad.dy:
        player.using_gamepad = true
    
    if not player.using_gamepad and not touch.a:
        resize(player.board.selection, 0)
    
    // Version/debugging
    draw_text({
        pos: xy(2, SCREEN_SIZE.y - 1),
        font: tile_point_font,
        text: "Board \"" + player.board.seed + "\" on v" + CREDITS.version,
        color: #0008,
        y_align: "bottom",
        x_align: "left",
        z: -1})

    let board_pos;
    
    // Our board has some content at the top, so don't switch
    // to portrait until all of the UI will be visible
    if landscape():
        // Landscape. Put at the bottom right (feel "closer" to a right handed mouse player)
        // Leave some space on the right so that if someone has the bad idea to play on a phone in this orientation
        // they won't be jammed against the edge with their thumb.
        board_pos = xy(SCREEN_SIZE.x - ½ board_pixel_size().x - 16, ½ SCREEN_SIZE.y + 12)
    else:
        // Portrait. Put at the bottom, centered, unless the screen is not very high
        board_pos = xy(½ SCREEN_SIZE.x, SCREEN_SIZE.y - ½ board_pixel_size().y - 18)
        
        // Slide up a little on narrow screens so that it is easier to swipe on a phone
        board_pos.y -= ⅓ max(SCREEN_SIZE.y - (board_pixel_size().y + 60), 0)
        
    board_update(
        player.board, board_pos, angle,
        if allow_selection then player.selection_change_callback else ∅)

    _player_draw_score(player, board_pos)
    
    if allow_selection:
        _player_update_rotate_button(player, board_pos)
        
    _player_update_history(player, board_pos)
    draw_timer(board_pos)



/* `true` if in landscape layout mode */
def landscape():
    return SCREEN_SIZE.x + 28 > SCREEN_SIZE.y



/* Draw the word history and manage touch dragging */
def _player_update_history(player, board_pos)
& preserving_transform:
    
    let list_rect
    if landscape():
        list_rect = {corner: xy(1, 5), size: xy(board_pos.x - ½ board_pixel_size().x - ¼ TILE_EXTENT + 1, SCREEN_SIZE.y - 16)}
    else:
        list_rect = {corner: xy(1, 0), size: xy(SCREEN_SIZE.x - 2, board_pos.y - ½ board_pixel_size().y - 32)}
    
    set_clip(list_rect)
    
    // Don't scroll this, draw it first
    draw_text({
        pos: list_rect.corner + list_rect.size - xy(2, 1),
        font: history_font,
        text: "" + size(player.history.list) + "/" + player.board.word_count,
        color: #DDD,
        x_align: "right",
        y_align: "bottom"})

    if not equivalent(SCREEN_SIZE, player.history.scroll_screen_size):
        // Reset
        player.history.scroll = 0

    const pos = xy(3, 2)
    let max_width = 0
    preserving_transform:
        set_transform(list_rect.corner - xy(player.history.scroll, 0))
        for entry at e in player.history.list:
            // Wrap into multiple columns if this element will
            // go off the page. Do this here so that we never
            // reset right before the end
            if pos.y > list_rect.size.y - 8:
                pos.y = 2
                pos.x += max_width + HISTORY_COLUMN_SEPARATION
                max_width = 0
                
            const emphasize = max(0, entry.emphasize_frame - game_frames)
            
            const wiggle = xy(oscillate(18% emphasize, -1, +1) - sign(emphasize), 0)
        
            // Save for animation later
            entry.pos = transform_ws_to_ss(pos)
            
            // Hide while animation is playing for this word, but
            // draw invisibly so we get bounds
            const show = game_frames > entry.reveal_frame
            const color = entry.color
            const outline = if emphasize then #FFF else entry.outline
            
            const bounds = draw_text({
                // Bounce if emphasized
                pos: pos + wiggle,
                font: if emphasize then history_emphasis_font else history_font,
                x_align: "left",
                y_align: "top",
                color: if show then color else #0000,
                outline: if show then outline else #0000,
                z: emphasize,
                text: entry.text})
    
            // Track if this makes the column larger
            max_width = max(max_width, text_width(history_font, entry.text))
            pos.y += history_font.line_height + 1
    
    const overflow = pos.x + max_width - list_rect.size.x + 1
    
    
    if not player.drag_start.pos:
        // Start drag
        //if touch.aa: debug_print(touch.xy, list_rect, overlaps(touch.xy, list_rect))
        if touch.aa and overlaps(touch.xy, list_rect):
            player.drag_start.pos = xy(touch.xy)
            player.drag_start.scroll = player.history.scroll
    else if touch.a:
        // Continue drag
        player.history.scroll = clamp(player.drag_start.scroll + player.drag_start.pos.x - touch.x, 0, overflow)
        
    else:
        // End drag
        player.drag_start.pos = ∅
    
    
    if not player.drag_start.pos and (not equivalent(SCREEN_SIZE, player.history.scroll_screen_size) or player.history.scroll_history_size ≠ size(player.history.list)):
        player.history.scroll_screen_size = xy(SCREEN_SIZE)
        player.history.scroll_history_size = size(player.history.list)
        // Set the scroll to whatever it needs to be to keep the 
        // most recent words on screen
        player.history.scroll = max(player.history.scroll, overflow)

    

def player_reset(player):
    player.score = 0
    remove_all(player.already_found)
    remove_all(player.history.list)
    _player_find_good_board(player)
    
    

/* Creates a random board, searching for good values as controlled by `BOARD_SEARCH` constants. */
def _player_find_good_board():
    let done = false
    let seed_word
    let word_array
    
    // Construct the rng based on the time. This will
    // cause players within the same window to be more likely
    // to have the same board. Temporary prior to investing
    // multiplayer servers.
    let board_rng = make_random(if DEBUG_BOARD_SEARCH then (utc_now() * 10) else ⌊utc_now() / (3 * 60)⌋)
    
    for i < BOARD_SEARCH.RETRIES:
        if i > 0: debug_print("*** Re-rolling ***") 

        // Search for a not-sensitive seed word to use
        while not seed_word or size(seed_word) > 8 or sensitive[seed_word]:
            seed_word = lowercase(q_decode(random_value(dictionary_array, board_rng)))
        
        // Loop for shuffling
        for j < BOARD_SEARCH.SHUFFLE_RETRIES:
            board_reset(player.board, seed_word, j)
                        
            word_array = board_find_all_words(player.board)
        
            if i == BOARD_SEARCH.RETRIES - 1 and j == BOARD_SEARCH.SHUFFLE_RETRIES - 1:
               // Last try, so just give up and accept the board
               debug_print("Gave up and accepted " + seed_word)
               done = true
               break
    
            if board_has_obvious_sensitive_word(player.board):
                debug_print("Reshuffled board " + seed_word + " because it had an obvious sensitive word")
                continue
    
            if size(word_array) < BOARD_SEARCH.MIN_WORDS:
                // Not enough words to even examine the board
                debug_print("Reshuffled board " + seed_word + " because it only produced " + size(word_array) + " words")        
                continue
    
            // Examine the actual words to see if there are enough good ones   
    
            // If a valuable letter appears, ensure that it is used in 
            // at least two words. First find high point value letters.
            const valuable_letter_table = {}
            for col in player.board.tile:
                for tile in col:
                    if LETTER_POINT_TABLE[tile.letter] ≥ 4:
                        valuable_letter_table[tile.letter] = 0
            
            const valuable_letters = keys(valuable_letter_table)
        
            // Iterate through words, rating them for each criterion
            let short_word_count = 0
            let long_word_count = 0
            let very_long_word_count = 0
            for word in word_array:
                if size(word) ≤ 4:
                    ++short_word_count
                if size(word) ≥ 5:
                    ++long_word_count
                if size(word) ≥ 7:
                    ++very_long_word_count
                    
                for letter in valuable_letters:
                    if contains(word, letter):
                        ++valuable_letter_table[letter]
            
            if short_word_count < BOARD_SEARCH.MIN_SHORT_WORDS:
                debug_print("Shuffled board " + seed_word + " because it only produced " + short_word_count + " short words")        
                continue
            
            if long_word_count < BOARD_SEARCH.MIN_LONG_WORDS:
                debug_print("Shuffled board " + seed_word + " because it only produced " + long_word_count + " long words")        
                continue
            
            if very_long_word_count < BOARD_SEARCH.MIN_VERY_LONG_WORDS:
                debug_print("Shuffled board " + seed_word + " because it only produced " + very_long_word_count + " very long words")        
                continue
            
            // See if we used the valuable letters
            let used_valuable_letters = true
            for count at letter in valuable_letter_table:
                if count < BOARD_SEARCH.MIN_VALUABLE_LETTER_USES:
                    used_valuable_letters = false
                    
            if not used_valuable_letters:
                debug_print("Shuffled board " + seed_word + " because it did not use all of the valuable letters")
                continue
    
            // Success!
            done = true
            break
    
        if done:
            // Stop early as we have a good board
            debug_print("Accepted board")
            break
        else:
            // Try again
            seed_word = ∅
        
    player.board.word_count = size(word_array)
    //debug_print(word_array)


let player = make_player()
