Play
════════════════════════════════════════════════════════════════════════

todo("Test D-pad")

todo("Bounce when the selection is a word")


let resolution_hook


enter
────────────────────────────────────────────────────────────────────────

if not resolution_hook:
    resolution_hook = continuously_set_screen_size_to_window("smaller", 224)


// Choose a random, non-sensitive word as the seed
set_random_seed()
let seed_word
const GOOD_BOARD_TRIES = 10
const GOOD_BOARD_WORDS = 60
for i < GOOD_BOARD_TRIES:
    while not seed_word or size(seed_word) > 8 or sensitive[seed_word]:
        seed_word = lowercase(q_decode(random_value(dictionary_array)))
    
    player_reset(player, seed_word)

    let word_array = board_find_all_words(player.board)
    if size(word_array) < GOOD_BOARD_WORDS:
        debug_print("Rejected board " + seed_word + " because it only produced " + size(word_array) + " words")
        seed_word = ∅
    else:
        debug_print(size(word_array), "words to be found!")
        player.board.word_count = size(word_array)
        break
    
//debug_print(word_array)


set_background(#544)




frame
────────────────────────────────────────────────────────────────────────
player_update(player, ∅, true)

// Hint for compiler:
// set_mode(Rotate) because "Rotate button"


            
            