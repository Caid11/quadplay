
def make_board():
    const board = {
        // The tiles
        
        tile: make_array(
            xy(COLS, ROWS), {
                // Could be a letter combo for Qu
                letter: "?",
                
                // mode_frame at which this was selected
                selected: false}, 
            deep_clone),
        
        // The selection as xy() indices, in order of selection
        selection: [],
        
        // Chosen based on the point value of the current word in _check
        selection_color: TILE_CENTER_SELECTED_COLOR
        
    }
    
    return board



def board_pixel_size():
    return xy(COLS, ROWS) * TILE_EXTENT + xy(COLS - 1, ROWS - 1) * TILE_GUTTER



def board_has_obvious_sensitive_word(board):
    // Ensure that no row or column or main diagonal spells a sensitive word.
    // These words are acceptable in play but we don't want
    // to explicitly spell them out
    
    def is_sensitive(word):
        word = lowercase(word)
        return sensitive[word] or sensitive[reversed(word)]
        
    
    let ok = true
    let word = ""
    
    // Check columns
    for i < COLS:
        word = ""
        for j < ROWS:
            word += board.tile[i][j].letter
        
        if is_sensitive(word): return true
        
    // Check rows
    for j < ROWS:
        word = ""
        for i < COLS:
            word += board.tile[i][j].letter
           
        if is_sensitive(word): return true
            

    // Check diagonals. If not square, make a half-hearted attempt at this
    // by using the shorter dimension
    const len = min(COLS, ROWS)
    word = ""
    for i < len:
        word += board.tile[i][i].letter
        
    if is_sensitive(word): return true

    word = ""
    for i < len:
        word += board.tile[COLS - i - 1][i].letter
        
    if is_sensitive(word): return true

    return false
    
    

/* Chooses a random letter for each tile. */
def board_reset(board, seed):
    board.seed = seed
    const rnd = make_random(seed)
    
    let tries = 0
    while tries == 0 or board_has_obvious_sensitive_word(board):
        ++tries
        
        // Shuffle the sets themselves
        assert(ROWS * COLS == size(LETTER_SET_ARRAY), "Distribution does not have enough tile sets")
        const distribution = shuffled(LETTER_SET_ARRAY, rnd)
        
        for col in board.tile:
            for tile in col:
                tile.letter = random_value(pop(distribution), rnd)
                tile.selected = false



/* True if these xy() integer indices are adjacent */
def _adjacent(A, B):
    return XY_DISTANCE(A, B) < 1.5
    

/* Returns the center of the tile at index in pixels relative to the grid upper left corner */
def _index_to_pos(index):
    return (index * (TILE_GUTTER * xy(min(index.x, 1), min(index.y, 1)) + TILE_EXTENT)
           - ½ xy(COLS - 1, ROWS - 1) * (TILE_EXTENT + TILE_GUTTER))


/* Returns the second to last value or ∅ */
def penultimate_value(array):
    return array[size(array) - 2]
    
    
    
/* Add `index` to the current selection, playing sounds
   as appropriate */
def board_select(board, index, history):
    const tile = board.tile[index.x][index.y]
    assert(not tile.selected)
    push(board.selection, index)
    tile.selected = mode_frames

    // Pan sound with position
    if not _board_check_new_word(board, history):
        _board_play_sound(select_tile_sound, 85%, 100%, index)



def board_deselect_last(board, history):
    const prev = pop(board.selection)
    board.tile[prev.x][prev.y].selected = false
    
    if not _board_check_new_word(board, history):
        todo("play deselect sound")



/* Computes the letter points and size multiplier. Assumes
   word is an all-lowercase string with only legal characters.*/
def _score_word(word):
    let score = 0
    for letter in word:
        score += LETTER_POINT_TABLE[letter] || 0
    
    // Length multiplier
    score *= min(5, size(word) - MIN_WORD_LENGTH + 1)
    
    return score



/* Adjusts the pan for the index */
def _board_play_sound(sound, volume, pitch, index):
    play_sound(sound, false, volume, (index.x + 1) / (COLS + 1), pitch)
    


/* Call after changing selection. 
   Returns true if there was a new word. As a side effect,
   plays a sound and sets the state for visualizing the word
   if there is one */
def _board_check_new_word(board, history):
    // Reset selection color
    board.selection_color = TILE_CENTER_SELECTED_COLOR
    
    const points = board_score_selection(board, history)
    if points == 0: return false
        
    // Every 10 points, notch up
    const α = min(⌊points / 10⌋ / 8, 100%)
    board.selection_color = perceptual_lerp_color(WORD_MIN_COLOR, WORD_MAX_COLOR, α)
    
    const pitch = 75% + min(max(0, points - 6)^0.1, 3)
    _board_play_sound(word_sound, 100% + 10% pitch, pitch, last_value(board.selection))

    todo("visualization state")

    return true



/* Returns 0 if there is no selection or the word is too short*/
def board_score_selection(board, history):    
    const word = board_selected_word(board)
    if size(word) < MIN_WORD_LENGTH or not dictionary[word]:
        return 0
    else:
        todo("Check history")
        return _score_word(word)



/* Swaps tiles as if the board were rotated 90 degrees CCW */
def board_rotate(board):
    assert(size(board.selection) == 0)
    assert(ROWS == COLS)
    
    const old = board.tile
    
    board.tile = make_array(xy(COLS, ROWS))
    for i < COLS:
        for j < ROWS:
            board.tile[i][j] = old[ROWS - j - 1][i]

/* 
 
   `pos`
   : Center of the grid in pixels
 
   `angle`
   : Rotate by this amount
   
   `history`
   : `player.history` used to prevent repeat word scoring
 
   `allow_selection`
   : If true, process user input. If false, remove selection 
     and preclude more 
     
*/
def board_update(board, pos, angle, history, allow_selection default false)
& preserving_transform:
    
    const TILE_CENTER_Z = 1
    const TILE_LETTER_Z = 2
    
    const grid_size = board_pixel_size()
    const tile_size = xy(TILE_EXTENT, TILE_EXTENT)
    const center_size = tile_size - TILE_GUTTER
    
    // Make the selection target slightly small to make 
    // it easier to select diagonals without hitting
    // the sides. If this is the first letter, make the
    // selection radius extra large instead
    const selection_size = center_size + (if size(board.selection) == 0 then +2 else -1)
            
    set_transform(pos)
    set_camera(xy(0, 0), -angle)

    draw_rect(xy(0, 0), grid_size + ½ TILE_EXTENT, #BBB)
    
    const subscript_offset = angle_to_xy(-45° - angle) * ⅓ TILE_EXTENT

    if touch.released_a or not allow_selection:
        resize(board.selection, 0)
    
    for col at i in board.tile:
        for tile at j in col:
            
            const index = xy(i, j)
            const pos = _index_to_pos(index)
            
            if allow_selection and overlaps({pos: pos, shape: "disk", size: selection_size}, touch.xy):
                if touch.aa and (size(board.selection) == 0):
                    
                    // Start selection
                    board_select(board, index, history)
                    
                else if (touch.a and
                        size(board.selection) > 0 and
                        _adjacent(index, last_value(board.selection))):

                    if tile.selected:
                        // Undo selection, backtracked
                        if equivalent(index, penultimate_value(board.selection)):
                            board_deselect_last(board, history)
                            
                    else:
                        // Continue selection
                        board_select(board, index, history)

            
            if touch.released_a or not allow_selection:
                tile.selected = false
            
            if not tile.selected:
                draw_rect(pos, tile_size, #CCC)

            let radius = ½ center_size.x
            
            // Bounce if just selected
            if tile.selected > mode_frames - 10:
                radius += ½ oscillate(tile.selected - mode_frames, 0, 5)
            
            draw_disk(
                pos,
                radius,
                if tile.selected then board.selection_color else #FFF,
                ∅, 
                TILE_CENTER_Z)

            const text_color = if tile.selected then #fff else #000
            
            // Letter
            draw_text({
                pos: pos, 
                font: tile_font, 
                text: tile.letter, 
                color: text_color,
                z: TILE_LETTER_Z})
            
            // Points
            if not tile.selected:
                draw_text({
                    pos: pos + subscript_offset, 
                    font: font, 
                    text: LETTER_POINT_TABLE[lowercase(tile.letter)], 
                    color: #AAA,
                    z: TILE_LETTER_Z})
    
    // Draw the connectors
    if size(board.selection) > 1:
        let prev_pos = _index_to_pos(board.selection[0]) 
        for 0 < s < size(board.selection):
            let pos = _index_to_pos(board.selection[s])
            draw_line(prev_pos, pos, board.selection_color, TILE_CENTER_Z, ¼ TILE_EXTENT)
            prev_pos = pos
        


/* Returns the lower case text word that is selected, 
   or "" if no selection */
def board_selected_word(board):
    let word = ""
    for s in board.selection:
        word += board.tile[s.x][s.y].letter
        
    return lowercase(word)

    
    
