/* Routines for manipulating a `ROWS` x `COLS` game board, which includes
   information about the current selection. */


/* Create a new board. The board is not initialized. Use `board_reset()`. */
def make_board():
    const board = {
        // The tiles
        
        tile: make_array(
            xy(COLS, ROWS), {
                // uppercase, Q means Qu
                letter: "?",
                                
                // mode_frame at which this was selected
                selected: 0},
            deep_clone),
                    
        // The UI selection as xy() indices, in order of selection
        selection: [],
        
        // Chosen based on the point value of the current word in _check
        selection_color: TILE_CENTER_SELECTED_COLOR        
    }
    
    return board
    
  

/* Computes and returns all n-tile sequences that are possible on this board. 
   Used by the solver.
   
   As a side effect, puts all members of that set and smaller
   n-grams larger than MIN_WORD_LENGTH that are also in `dictionary`
   into `word_set`.
   */
def _board_ngram_set(board, n, word_set):
    const ngram_set = {}
    const before = now()
    
    // Applied to each subpath
    def visit(kgram, index):
        const k = size(kgram)
        
        if k ≥ MIN_WORD_LENGTH:
            // We found a real word as a side effect of trigram processing
            if dictionary[kgram]:
                word_set[kgram] = 1
        
            // We have completed an n-gram, done with this path    
            if k == n:
                ngram_set[kgram] = 1
                return true

    board_visit_subpaths(board, visit)   
    
    // debug_print(round((now() - before) * 1000), "ms to find", size(ngram_set), "x " + n + "-grams and all shorter words")
    return ngram_set


/*
  Visit all possible subpaths and invoke `visit(word, index)` on them,
  where the tile index is `xy(index mod COLS, floor(index / COLS))`.
  
  If `visit()` returns true, stop searching children of that subpath.
  
  The word is all-caps and Q-encoded.
*/
def board_visit_subpaths(board, visit):
    // Flatten the board to a string
    let board_string = ""
    for y < ROWS:
        for x < COLS:
            board_string += board.tile[x][y].letter

    for index < ROWS * COLS:
        _board_visit_paths_helper(board_string, index, 1 bitshl index, board_string[index], visit)
    


/* `_neighbor_index_array_table[i]` = array of indices of all neighbors of tile (`i mod COLS`, `floor(i / cols)`),
   where the indices have the same packing. Used by `_board_ngram_set_helper()`.

   This simplifies the code for searches over the board and technically makes it them a more
   generalizable graph algorithm. There's negligible performance impact from
   using precomputed neighbors vs. computing dynamically
 */ 
const _neighbor_index_array_table = make_array(COLS * ROWS, [], clone)

// Initialize `_neighbor_index_array_table`.
// Iteration order doesn't matter for these loops, but this makes 
// more obvious that we're using row-major indexing.
for y < ROWS:
    for x < COLS:
        const tile = _neighbor_index_array_table[x + y * COLS]
        for -1 ≤ dx ≤ +1:
            if x + dx ≥ 0 and x + dx < COLS:
                for -1 ≤ dy ≤ +1:
                    // Is this neighbor in bounds?
                    if y + dy ≥ 0 and y + dy < ROWS and (dx ≠ 0 or dy ≠ 0):
                        push(tile, (x + dx) + (y + dy) * COLS)



/* Recursive portion of `_board_compute_ngram_set()` 

   `board_string`
   : The board as a row-major flattening

   `kgram`
   : Concatenation of the labels of the visited tiles,
     pulled from `board_string`.
   
   `index`
   : `x + y * COLS` of the current tile coordinates
   
   `visit(word, index)`
   : Arbitrary callback for processing this subpath.
     If `visit` returns `true` then the path terminates here,
     otherwise it recurses as deep as possible.
*/
def _board_visit_paths_helper(board_string, index, used_mask, word, visit):
    // Run the callback and only continue if it returns false
    if not visit(word, index):
    
        // Check all neighbors of index
        for neighbor in _neighbor_index_array_table[index]:
            const mask = 1 bitshl neighbor
            
            // Did we already use the tile at neighbor?
            if not (mask ∩ used_mask):
                // Continue search, updating the mask and kgram
                _board_visit_paths_helper(board_string, neighbor, mask ∪ used_mask, word + board_string[neighbor], visit)
        


/* Return true if `word` can be found in `board`. */
def _board_validate_word(board, word):
    let found = false
    
    def visit(prefix):
        if found or not starts_with(word, prefix):
            // Stop all other recursion once we've found the word on some
            // other path, or determined that this prefix cannot lead to
            // this word
            return true
        else if word == prefix:
            // We found the word
            found = true
            return true
    
    board_visit_subpaths(board, visit)
    
    return found
    


/* Returns an alphabetically-sorted array of all possible dictionary 
   words of `MIN_WORD_LEN` on this board. The words have been processed by
   `q_decode()` and are uppercase. */
def board_find_all_words(board):
    const before = now()

    // Words discovered during n-gram search
    const word_set = {}
    
    // This produces the 5-grams used for filtering and in the process
    // also finds all words of length 3, 4, 5.
    const quintgram_set = _board_ngram_set(player.board, 5, word_set)

    // Used for performance profiling
    let long_count = 0
    const short_count = size(word_set)
    
    // Search all words of length > 5 in the dictionary for likely hits
    for word in dictionary_array:
        const k = size(word)
        
        if (k > 5 and
            // 6+-letter word prefix
            quintgram_set[slice(word, 0, 5)] and
         
            // 6+-letter word suffix
            (k < 6 or quintgram_set[slice(word, k - 5)]) and

            // 8+-letter word middle
            (k < 8 or quintgram_set[slice(word, 2, 7)])):

            // This long word is very likely to appear, but we
            // must validate it.
            if _board_validate_word(board, word):
                word_set[word] = 1
            ++long_count

    /*    
    debug_print("\nAfter n-gram filtering:\n", 
        short_count, "words with 3-5 letters\n",
        long_count, "likely words with 6+ letters\nAfter validation:\n",
        short_count, "words with 3-5 letters\n",
        size(word_set) - short_count, "actual words with 6+ letters\n")
    */

    debug_print(round((now() - before) * 1000), "ms to find all", size(word_set), "words")
    
    const word_array = keys(word_set)
    for w < size(word_array):
        word_array[w] = q_decode(word_array[w])
        
    sort(word_array)
    return word_array
    


def board_pixel_size():
    return xy(COLS, ROWS) * TILE_EXTENT + xy(COLS - 1, ROWS - 1) * TILE_GUTTER



/* Detect if a row or column or main diagonal spells a sensitive word.
   These words are acceptable in play but we don't want to explicitly
   spell them out. */
def board_has_obvious_sensitive_word(board):
    
    def is_sensitive(word):
        // The sensitive dictionary has not been encoded
        word = lowercase(q_decode(word))
        return sensitive[word] or sensitive[reversed(word)]
        
    let ok = true
    let word = ""
    
    // Check columns
    for i < COLS:
        word = ""
        for j < ROWS:
            word += board.tile[i][j].letter
        
        if is_sensitive(word): return true
        
    // Check rows
    for j < ROWS:
        word = ""
        for i < COLS:
            word += board.tile[i][j].letter
           
        if is_sensitive(word): return true
            

    // Check diagonals. If not square, make a half-hearted attempt at this
    // by using the shorter dimension
    const len = min(COLS, ROWS)
    word = ""
    for i < len:
        word += board.tile[i][i].letter
        
    if is_sensitive(word): return true

    word = ""
    for i < len:
        word += board.tile[COLS - i - 1][i].letter
        
    if is_sensitive(word): return true

    return false
    
    

/* Chooses a random letter for each tile. */
def board_reset(board, seed):
    board.seed = seed
    const rnd = make_random(seed)
    
    let tries = 0
    while tries == 0 or board_has_obvious_sensitive_word(board):
        ++tries
        
        // Shuffle the sets themselves
        assert(ROWS * COLS == size(LETTER_SET_ARRAY), "Distribution does not have enough tile sets")
        const distribution = shuffled(LETTER_SET_ARRAY, rnd)
        
        for col in board.tile:
            for tile in col:
                tile.letter = random_value(pop(distribution), rnd)
                tile.selected = 0



/* True if these xy() integer indices are adjacent */
def _adjacent(A, B):
    return XY_DISTANCE(A, B) < 1.5
    

/* Returns the center of the tile at index in pixels relative to the grid upper left corner */
def _index_to_pos(index):
    return (index * (TILE_GUTTER * xy(min(index.x, 1), min(index.y, 1)) + TILE_EXTENT)
           - ½ xy(COLS - 1, ROWS - 1) * (TILE_EXTENT + TILE_GUTTER))


/* Returns the second to last value or ∅ */
def penultimate_value(array):
    return array[size(array) - 2]
    
    
    
/* Add `index` to the current selection, playing sounds
   as appropriate */
def board_select(board, index, history):
    const tile = board.tile[index.x][index.y]
    assert(not tile.selected)
    push(board.selection, index)
    tile.selected = mode_frames

    // Pan sound with position
    if not _board_check_new_word(board, history):
        _board_play_sound(select_tile_sound, 85%, 100%, index)



def board_deselect_last(board, history):
    const prev = pop(board.selection)
    board.tile[prev.x][prev.y].selected = false
    
    if not _board_check_new_word(board, history):
        todo("play deselect sound")




/* Adjusts the pan for the index */
def _board_play_sound(sound, volume, pitch, index):
    play_sound(sound, false, volume, (index.x + 1) / (COLS + 1), pitch)
    


/* Call after changing selection. 
   Returns true if there was a new word. As a side effect,
   plays a sound and sets the state for visualizing the word
   if there is one */
def _board_check_new_word(board, history):
    
    const points = board_score_selection(board, history)

    if points == 0: 
        // Reset selection color
        board.selection_color = TILE_CENTER_SELECTED_COLOR
        return false
        
    // Every 10 points, notch up
    const α = min(⌊points / 10⌋ / 8, 100%)
    board.selection_color = perceptual_lerp_color(WORD_MIN_COLOR, WORD_MAX_COLOR, α)
    
    const pitch = 75% + min(max(0, points - 6)^0.1, 3)
    _board_play_sound(word_sound, 100% + 10% pitch, pitch, last_value(board.selection))

    todo("visualization state")

    return true



/* Returns 0 if there is no selection or the word is too short*/
def board_score_selection(board, history):    
    const word = board_selected_word(board)
    if size(word) < MIN_WORD_LENGTH or not dictionary[word]:
        return 0
    else:
        todo("** Check history")
        return score_word(word)



/* Swaps tiles as if the board were rotated 90 degrees CCW */
def board_rotate(board):
    assert(size(board.selection) == 0)
    assert(ROWS == COLS)
    
    const old = board.tile
    
    board.tile = make_array(xy(COLS, ROWS))
    for i < COLS:
        for j < ROWS:
            board.tile[i][j] = old[ROWS - j - 1][i]



/* Draw the board and manage UI state changes.
 
   `pos`
   : Center of the grid in pixels
 
   `angle`
   : Rotate by this amount
   
   `history`
   : `player.history` used to prevent repeat word scoring
 
   `allow_selection`
   : If true, process user input. If false, remove selection 
     and preclude more 
     
*/
def board_update(board, pos, angle, history, allow_selection default false)
& preserving_transform:
    
    const TILE_CENTER_Z = 1
    const TILE_LETTER_Z = 2
    
    const grid_size = board_pixel_size()
    const tile_size = xy(TILE_EXTENT, TILE_EXTENT)
    const center_size = tile_size - TILE_GUTTER
    
    // Make the selection target slightly small to make 
    // it easier to select diagonals without hitting
    // the sides. If this is the first letter, make the
    // selection radius extra large instead
    const selection_size = center_size + (if size(board.selection) == 0 then +2 else -1)
            
    set_transform(pos)
    set_camera(xy(0, 0), -angle)

    draw_rect(xy(0, 0), grid_size + ¼ TILE_EXTENT + 2, #BBB)
    
    const subscript_offset = angle_to_xy(-45° - angle) * ⅓ TILE_EXTENT

    if touch.released_a or not allow_selection:
        resize(board.selection, 0)
    
    // Save before iteration so that it does not change within a frame
    const selection_color = board.selection_color
    
    for col at i in board.tile:
        for tile at j in col:
            
            const index = xy(i, j)
            const pos = _index_to_pos(index)
            
            if allow_selection and overlaps({pos: pos, shape: "disk", size: selection_size}, touch.xy):
                if touch.aa and (size(board.selection) == 0):
                    
                    // Start selection
                    board_select(board, index, history)
                    
                else if (touch.a and
                        size(board.selection) > 0 and
                        _adjacent(index, last_value(board.selection))):

                    if tile.selected:
                        // Undo selection, backtracked
                        if equivalent(index, penultimate_value(board.selection)):
                            board_deselect_last(board, history)
                            
                    else:
                        // Continue selection
                        board_select(board, index, history)

            
            let radius = ½ center_size.x
            
            if touch.released_a or not allow_selection:
                tile.selected = false
            
            if tile.selected:
                // Bounce if just selected
                if tile.selected > mode_frames - 12:
                    radius += ⅕ oscillate(tile.selected - mode_frames, 0, 6) + 0.8
            else:
                // Only draw the rect if not selected
                draw_rect(pos, tile_size, #CCC)            
            
            draw_disk(
                pos,
                radius,
                if tile.selected then selection_color else #FFF,
                ∅, 
                TILE_CENTER_Z)

            const text_color = if tile.selected then #fff else #000
            
            // Label
            draw_text({
                pos: pos, 
                font: tile_font, 
                text: if tile.letter == "Q" then "Qu" else tile.letter,
                color: text_color,
                z: TILE_LETTER_Z})
            
            // Points
            if not tile.selected:
                draw_text({
                    pos: pos + subscript_offset, 
                    font: tile_point_font, 
                    text: LETTER_POINT_TABLE[tile.letter], 
                    color: #AAA,
                    z: TILE_LETTER_Z})
    
    // Draw the connectors
    if size(board.selection) > 1:
        let prev_pos = _index_to_pos(board.selection[0]) 
        for 0 < s < size(board.selection):
            let pos = _index_to_pos(board.selection[s])
            draw_line(prev_pos, pos, selection_color, TILE_CENTER_Z, ¼ TILE_EXTENT)
            prev_pos = pos
        


/* Returns the lower case text word that is selected, 
   or "" if no selection */
def board_selected_word(board):
    let word = ""
    for s in board.selection:
        word += board.tile[s.x][s.y].letter
        
    return word

    
    
