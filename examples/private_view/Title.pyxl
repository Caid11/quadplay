Title
════════════════════════════════════════════════════════════════════════

/*
All quadplay games can be forced into network multiplayer mode
by the player using the system menu. This game shows how to 
explicitly enable network multiplayer to streamline the UI
by the player, bypassing the need for the system menu.
*/

def create_game():
    set_mode(Lobby) because "Chose create game"

let choice_index = 0

def join_game():
    pause_menu("Online -> Guest")

const choice_array = [
    {text: "Create Game", callback: create_game},
    {text: "Join Game", callback: join_game},
    {text: "Quit", callback: quit_game}
]


enter
────────────────────────────────────────────────────────────────────────

// If it is the beginning of the entire program, enter private views
// mode. This is the "true" argument. That forces the full resolution
// to be divided up into four subscreens of ½ x ½ resolution each.
if game_frames == 0:
    set_screen_size(SCREEN_SIZE, true)

resize(player_array, 0)
reset_transform()
reset_clip()


frame
────────────────────────────────────────────────────────────────────────

if gamepad_array[0].status == "host":
    // The player entered host mode via the quadplay system menu,
    // so directly go into Lobby mode.
    set_mode(Lobby) because "Hosting via system"


// Set the other 3 views to bright yellow to show where
// it is when debugging via private_views = false.
set_background(#ff0)

// Set the title's visible background to gray
draw_corner_rect(VIEW_ARRAY[0].corner, VIEW_ARRAY[0].size, #777)


// Draw the main menu
let args = {
    font: font,
    pos: ½ VIEW_ARRAY[0].size - xy(20, 0), 
    color: #d, 
    shadow: #3,
    x_align: "left",
    y_align: "center"
}

draw_text({...args, x_align: "center", pos: xy(½ VIEW_ARRAY[0].size.x, 20), text: "PRIVATE VIEW EXAMPLE", color: #F, outline: ∅, shadow: #3})

for choice at i in choice_array:
    const selected = choice_index == i
        
    draw_text({
        ...args,
        text: choice.text,
        color: if selected then #000 else args.color,
        outline: if selected then #ff0 else args.outline,
        shadow: if selected then ∅ else args.shadow
    })
    
    if selected:
        draw_text({
            ...args,
            pos: args.pos - xy(10, 0),
            text: ">",
            color: #000,
            outline: #ff0,
            shadow: ∅
        })
        
    args.pos.y += font.line_height

choice_index = clamp(choice_index + gamepad_array[0].yy, 0, size(choice_array) - 1)

if gamepad_array[0].pressed_a:
    // Make this menu choice
    choice_array[choice_index].callback()
