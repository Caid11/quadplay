$Play
════════════════════════════════════════════════════════════════════════

const gameArray = [{
   title: "Quadpaddle",
   developer: "CasualEffects",
   url: "quad://games/quadpaddle",
   description: "Blast bricks as a team from all four sides, grabbing powerups and racking up points.",
   version:      0.5,
   cooperative:  true,
   competitive:  false,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   false,
   label: qplabel[0][0],
   preview: qppreview
},

{
   title: "Doubles de Pon",
   developer: "Steve LaVietes",
   url: "quad://games/doublesdepon",
   description: "Action puzzle game for one to four players.",
   version:      1.0,
   cooperative:  true,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   true,
   label: dplabel[0][0],
   preview: dppreview
},

{
   title: "Serpitron",
   developer: "CasualEffects",
   url: "quad://games/serpitron",
   description: "Grow your serpent without crashing into obstacles or yourself. With rats, shotguns, blizzards, cities, & pyramids.",
   version:      1.5,
   cooperative:  false,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   builtin:      true,
   highscores:   false,
   label: splabel[0][0],
   preview: sppreview
},

{
   title: "Ice Time",
   developer: "CasualEffects",
   url: "quad://games/icetime",
   description: "2 vs. 2 ice hockey with teams, player stats., faceoffs, passing…and a Zamboni.",
   version:      1.0,
   cooperative:  true,
   competitive:  true,
   min_players:  1,
   max_players:  4,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label: itlabel[0][0],
   preview: itpreview
},

                  
{
   title: "Beat The Gobblins",
   developer: "Stephan Steinbach",
   url: "quad://games/beat_the_gobblins",
   
   version:      1.1,
   description:  "An evil wizzard has trapped you on top of their tower and summoned hordes of angry bombgobblins. Good luck!",
   min_players:   1,
   max_players:   1,
   cooperative:  false,
   competitive:  false,
   achievements: false,
   highscores:   true,
   builtin:      true,
   label: bglabel[0][0],
   preview: bgpreview
},

{
   title: "R. P. S.",
   developer: "Casual Effects",
   url: "quad://games/rps",
   
   version:      1.0,
   description:  "Rock-paper-scissors battle royale.",
   min_players:   1,
   max_players:   4,
   cooperative:  false,
   competitive:  true,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label:        rplabel[0][0],
   preview:      rppreview
},

{
   title: "Beyond Control",
   developer: "Casual Effects",
   url: "quad://games/beyond_control",
   version:      1.0,
   description:  "Program your broken robots to race through the ruins.",
   min_players:   1,
   max_players:   4,
   cooperative:  false,
   competitive:  true,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label:        bclabel[0][0],
   preview:      bcpreview
},

{
   title: "Across the Lake",
   developer: "The Steinbachers",
   url: "quad://games/across_the_lake",
   version:      1.0,
   description:  "You are a stone, skipping across the lake in this endless skipper.",
   min_players:   1,
   max_players:   1,
   cooperative:  false,
   competitive:  false,
   achievements: false,
   highscores:   false,
   builtin:      true,
   label:        allabel[0][0],
   preview:      alpreview
}]

const backgroundColor = #135
const promptColor = #4DF
const promptFont = mediumFont
const shadowColor = #0006
const selectedColor = #f
const unselectedColor = #9

// Pixel scrolling
let gameShift = 0
let gameIndex = 0

let modeFrameShift = 0

def drawIcon(icon, pos):
   assert(icon != nil)
   draw_sprite({sprite: icon, pos: pos + xy(3 + icon.size.x / 2, 3 - icon.size.y / 2)})
   return xy(icon.size.x + 2, icon.size.y + 2)


frame
────────────────────────────────────────────────────────────────────────

const intro_frames = 20
if game_frames < intro_frames:
   // Fade and slide in
   const α = 1 - min(1, (game_frames + 1) / (intro_frames + 1))
   
   set_post_effects({
      background: #000,
      pos:        xy(α * SCREEN_SIZE.x, 0),
      color:      rgba(0, 0, 0, α)
   })
   
else if game_frames == intro_frames:
   reset_post_effects()
   
set_background(backgroundColor)
draw_corner_rect(xy(0, 0), xy(384, 15), #2)
draw_line(xy(0, 16), xy(384, 16), #f)
draw_text({font: quadplayFont, text:"quadplay✜ games", pos: xy(SCREEN_SIZE.x / 2, 11), color: selectedColor, shadow: shadowColor, x_align: "center"})
//draw_text({font: smallFont, text:$navigator.userAgent + "||" + $navigator.platform, pos: xy(SCREEN_SIZE.x / 2, 11), color: selectedColor, shadow: shadowColor, x_align: "center", wrap_width: SCREEN_SIZE.x})



/*
// Disable these features until we're ready for it

draw_corner_rect(xy(0,0), xy(90, 15), #2)
draw_corner_rect(xy(155,0), xy(230, 15), #2)

draw_text({font: mediumFont, text:joy.prompt["⍇"], pos: xy(70,12), color: promptColor, shadow: shadowColor})
draw_text({font: mediumFont, text:"LIBRARY", pos: xy(99,12), color: selectedColor, shadow: shadowColor})
draw_text({font: mediumFont, text:"DISCOVER", pos: xy(180,12), color: unselectedColor, shadow: shadowColor})
draw_text({font: mediumFont, text:"URL", pos: xy(260,12), color: unselectedColor, shadow: shadowColor})
draw_text({font: mediumFont, text:joy.prompt["⍈"], pos: xy(300,12), color: promptColor, shadow: shadowColor})

draw_line(xy(0, 16), xy(90, 16), #f)
draw_line(xy(90, 16), xy(90, 1), #f)
draw_line(xy(91, 0), xy(154, 0), #f)
draw_line(xy(155, 1), xy(155, 16), #f)
draw_line(xy(155, 16), xy(384, 16), #f)
*/

draw_text({font: mediumFont, text:joy.prompt["⍐"], pos: xy(1, 28), color: promptColor, shadow: shadowColor})
draw_text({font: mediumFont, text:joy.prompt["⍗"], pos: xy(1, 220), color: promptColor, shadow: shadowColor})

const boxVerticalSpacing = 75

set_clip(xy(12, 20), xy(64, 201))
for gameIndex - 2 <= g <= gameIndex + 2:
   const game = array_value(gameArray, g, "loop")
   const pos = xy(44, boxVerticalSpacing * g + 64/2 + 19 - gameShift - (gameIndex - 1) * boxVerticalSpacing)
   draw_sprite({sprite: game.label, pos: pos})
   draw_line(pos + xy(1-64/2, 64/2), pos + xy(64/2-2, 64/2), shadowColor)
reset_clip()

// Highlight selected game
draw_corner_rect(xy(11, 93), xy(66, 66), nil, #f)
draw_corner_rect(xy(10, 92), xy(68, 68), nil, #d)
   
local:
   const game = gameArray[gameIndex]
   const t = floor((mode_frames - modeFrameShift) / 3) mod 60
   const x = 99
   const pos = xy(x + 384/4, 224/4 + 66)
   draw_sprite({sprite: game.preview[t mod 6][floor(t / 6)], pos: pos})
   draw_line(pos + xy(1-384/4, 224/4), pos + xy(384/4-2, 224/4), shadowColor)
   draw_line(pos + xy(2-384/4, 224/4 + 1), pos + xy(384/4-3, 224/4 + 1), shadowColor / 2)
   draw_text({font:largeFont, text:game.title, pos:xy(x, 40), color:selectedColor, shadow:shadowColor, x_align:"left"})
   draw_text({font:mediumFont, text:"by " + game.developer, pos:xy(x, 56), color:selectedColor, shadow:shadowColor, x_align:"left"})
   draw_text({font:smallFont, text:game.url, pos:xy(x, 220), color:unselectedColor, x_align:"left"})
   draw_text({font:smallFont, text:game.description, pos:xy(x, 193), color:selectedColor, x_align:"left", wrap_width: 280})

   const sideX = 295
   const wordX = sideX + 27
   draw_text({font:promptFont, text:joy.prompt["ⓟ"] + "  PLAY", pos:xy(sideX + 7, 74), color:promptColor, shadow:shadowColor, x_align:"left"})
   if not game.builtin: draw_text({font:promptFont, text:joy.prompt["ⓓ"] + "  FORGET", pos:xy(sideX + 7, 88), color:promptColor, shadow:shadowColor, x_align:"left"})

   // Icons
   let y = 112
   if game.max_players == 0 or game.min_players == 0 and game.max_players == nil:
      draw_text({font:mediumFont, text:"Animation", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).y
      drawIcon(icons.players[0], xy(sideX, y)).y
      y += 15
   else if game.min_players != nil and game.max_players != nil:
      let lo = clamp(min(game.min_players, game.max_players), 1, 5)
      let hi = clamp(max(game.min_players, game.max_players), 1, 5)
      if lo != hi:
         drawIcon(icons.players[lo], xy(sideX, y))
         draw_line(xy(sideX + 21, y - 4), xy(sideX + 28, y - 4), selectedColor)
         drawIcon(icons.players[hi], xy(sideX + 29, y)).y
      else:
         drawIcon(icons.players[lo], xy(sideX, y))
         draw_text({font:mediumFont, text:"" + lo + "-Player", pos:xy(wordX, y), color:selectedColor, x_align:"left"})
      y += 15
   else if game.min_players != nil or game.max_players != nil:
      // Only one specified
      let lo = if game.min_players != nil then game.min_players else game.max_players
      drawIcon(icons.players[clamp(lo, 1, 5)], xy(sideX, y))
      draw_text({font:mediumFont, text:"" + lo + "-Player", pos:xy(wordX, y), color:selectedColor, x_align:"left"})
      y += 15

   if game.cooperative:
      drawIcon(icons.cooperative, xy(sideX, y)).y
      y += draw_text({font:mediumFont, text:"Cooperate", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).y

   if game.competitive:
      drawIcon(icons.competitive, xy(sideX, y)).y
      y += draw_text({font:mediumFont, text:"Compete", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).y
      
   if game.achievements:
      drawIcon(icons.achievements, xy(sideX, y)).y
      y += draw_text({font:mediumFont, text:"Achieve", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).y

   if game.highscores:
      drawIcon(icons.highscores, xy(sideX, y)).y
      y += draw_text({font:mediumFont, text:"Highscore", pos:xy(wordX, y), color:selectedColor, x_align:"left"}).y

for pad in gamepad_array:
   if pad.aa or pad.qq or pad.$pp:
      def callback():
         launch_game(gameArray[gameIndex].url)
         
      set_mode($SlideOut, callback) because "Player selected game"
      
   // Animate scrolling
   if joy.yy:
      const Δy = 3 pad.yy
      play_sound(boop, false, 300%)
      def shift(): gameShift += Δy
      add_frame_hook(shift, nil, boxVerticalSpacing / 3)

// Change games
if gameShift >= boxVerticalSpacing:
   gameShift -= boxVerticalSpacing
   modeFrameShift = mode_frames - 1
   ++gameIndex
else if gameShift <= -boxVerticalSpacing:
   gameShift += boxVerticalSpacing
   --gameIndex
   modeFrameShift = mode_frames - 1

gameIndex = loop(gameIndex, gameArray.length)
   
