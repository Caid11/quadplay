$SystemMenu
════════════════════════════════════════════════════════════════════════

const window_background_color = #135
const window_border_color     = #fff
const text_color              = #fff
const text_shadow_color       = #0006
const prompt_color            = #4DF
const selected_color          = #f
const unselected_color        = #b

const fade_in_frames          = 10
const slide_in_frames         = 9

let choice_array
let choice_index = 0

let old_transform
let old_clip
let old_post_effects
let old_background

let max_choice_width
let line_height

let font = $font9
if SCREEN_SIZE.y <= 64: font = $font5
else if SCREEN_SIZE.y <= 180: font = $font8


def close(callback):
    pop_mode(callback)
   

def choose():
   const choice = choice_array[choice_index]

   if choice.confirm:
      push_mode($ConfirmDialog, choice)
   else:
      close(choice.callback)

      
def set_controls():
   if SCREEN_SIZE.x == 64:
      push_mode($SetControls64)
   else:
      push_mode($SetControls)


def game_credits():
   push_mode($GameCredits)


      
enter
────────────────────────────────────────────────────────────────────────
$pauseAllSounds()
choice_index = 0

old_transform = get_transform()
old_clip = get_clip()
old_post_effects = get_post_effects()
old_background = get_background()

reset_post_effects()
set_clip(xy(0, 0), SCREEN_SIZE, -2047, 4096)
// Force the clipping range beyond what the API normally allows
$clipZ2 = 2049


choice_array = [{text: "Resume Game", callback: ∅, confirm: false},
               // Insert custom menu choices after "Resume"
               ...$customPauseMenuOptions]

if size($customPauseMenuOptions) < 3 or SCREEN_SIZE.y > 64:
   // Only add the credits option if there is room
   push(choice_array, {text: "Game Credits", callback: game_credits, confirm: false})

push(choice_array,
     {text: "Set Controls", callback: set_controls, confirm: false},
     {text: "Restart Game", callback: reset_game, confirm: true},
     {text: "Quit to System", callback: quit_game, confirm: true})

max_choice_width = 0

line_height = round(110% font.line_height)
if SCREEN_SIZE.y <= 64: ++line_height

for c in choice_array: max_choice_width = max(max_choice_width, text_width(font, c.text))

leave
────────────────────────────────────────────────────────────────────────
set_transform(old_transform)
set_clip(old_clip)
set_post_effects(old_post_effects)
set_background(old_background)
$resumeAllSounds()


pop_mode(callback) from $ConfirmDialog
────────────────────────────────────────────────────────────────────────
// Return with the callback
if callback: close(callback)


pop_mode() from $GameCredits
────────────────────────────────────────────────────────────────────────
// Return to the main game
pop_mode()


frame
────────────────────────────────────────────────────────────────────────
if mode_frames > fade_in_frames + slide_in_frames + 2:
   for control in gamepad_array:
      if control.qq or control.$pp:
         play_sound($cancelUISound)
         close(∅)
      else if control.aa or control.bb:
         play_sound($acceptUISound)
         choose()
      else if control.yy:
         const prev = choice_index
         choice_index = clamp(choice_index + control.yy, 0, size(choice_array) - 1)
         play_sound(if prev == choice_index then $denyUISound else $moveUISound)

if mode_frames == fade_in_frames: play_sound($openUISound)

// Draw the paused game shadowed
reset_transform()
draw_previous_mode()

// Draw *at* the near plane, which due to the epsilon z offsets
// guarantees that the menu draws in front of everything from the
// previous mode. This forces us to draw in order, however.
set_transform(xy(0, 0), xy(1, 1), 2048.5, 1)
draw_corner_rect(xy(0, 0), SCREEN_SIZE, rgba(14%, 14%, 14%, 80% clamp((mode_frames + 1) / fade_in_frames, 15%, 100%)))


// Our last menu item is designed to be the longest, so use that
// to estimate width
const window_size = round(xy(max_choice_width + 1.5 font.line_height, SCREEN_SIZE.y + 2))

// Animate sliding in of window
set_transform(xy(1 + SCREEN_SIZE.x - window_size.x * (50% - clamp(1 - (mode_frames - fade_in_frames) / slide_in_frames, 0%, 100%)), SCREEN_SIZE.y / 2), xy(1, 1), 2048.5, 1)

// Window shadow
local:
   const P = xy(0, window_size.y / 2);
   const s = window_size.x / 2 - 1
   draw_line(P + xy(-s, 0), P + xy(s, 0), rgba(0, 0, 0, 40%))
   draw_line(P + xy(1 - s, 1), P + xy(s - 1, 1), rgba(0, 0, 0, 15%))

// Window
draw_rect(xy(0, 0), window_size, window_background_color, window_border_color)

let y = -line_height * (size(choice_array) - 1) / 2

// Draw options
for i < size(choice_array):
   const active      = choice_index == i
   const bright      = (1 + cos(mode_frames / 9)) / 2
   const color       = if active then lerp(prompt_color, #fff, 50% bright) else unselected_color
   const outline     = if active then rgba(1, 1, 1, 25% bright) else ∅
   const yOffset     = if active then -1 else 0
   const shadow      = if active then 50% text_shadow_color else text_shadow_color

   const x           = -(max_choice_width - 0.6 line_height + 1) / 2
   const text        = choice_array[i].text
   draw_text(font, text, xy(x, y + 1), shadow, ∅, ∅, "left", "center")
   draw_text(font, text, xy(x, y + yOffset), color, ∅, outline, "left", "center")
   
   if active:
      draw_text(font, "✜", xy(x - 40% line_height + 1, y + 1), shadow, ∅, ∅, "right", "center")
      draw_text(font, "✜", xy(x - 40% line_height + 1, y + yOffset), color, ∅, outline, "right", "center")
      
   y += line_height
