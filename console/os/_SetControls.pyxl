$SetControls
════════════════════════════════════════════════════════════════════════

// This code handles all screen sizes. Most use the same layout
// with slight alignment tweaks and font changes in order to
// fit well.
//
// The user interface at 64x64 has a different layout,
// which shows only one player's controls and is preceeded
// by a menu for selecting which player is active.

const window_background_color = #135
const window_border_color     = #fff
const text_color              = #fff
const text_shadow_color       = #0006
const prompt_color            = #4DF
const selected_color          = #f
const unselected_color        = #b

const controllerSpritesheet = if SCREEN_SIZE.y >= 224 then $controllerSpritesheet44 else $controllerSpritesheet22
const controllerTypeArray = ["Quadplay", "Xbox", "Xbox360", "Keyboard", "Kbd_Alt", "Kbd_P1", "Kbd_P2", "PS5", "PS4", "PS3", "SNES", "SwitchPro", "JoyCon_R", "JoyCon_L", "Zero", "HOTAS", "X_Arcade", "Arcade", "Arcade_X", "Arcade_PS", "Stadia", "GPD_Win", "SN30_Pro", "PiBoy_DMG", "Genesis"];

// Tweak layout for square aspect ratios
let shiftX = 0 // Symmetric text shift from center
let shiftY = 0 // Vertical offset
let offsetX = 0 // Asymmetric text shift to left to accomodate large button prompt
let shiftSpriteY = 0
let arrowX = 76 // Position of the scroll arrows
let arrowY = -3
let titleY = -7


if SCREEN_SIZE.x == 64:
   shiftX = 16
   offsetX = 14
   arrowX = 54
   shiftY = 11
   arrowY = -shiftY
   titleY = arrowY
   shiftSpriteY = -10
else if SCREEN_SIZE.x == 128:
   shiftY = 10
   shiftX = 22
   offsetX = 12
   shiftSpriteY = -36
   arrowY = -10
   arrowX = 54
   shiftSpriteY = 0
   titleY = -14
else if SCREEN_SIZE.x < 384: // 192 or 320
   arrowY = -6
   shiftX = -10
   offsetX = 8
   shiftY = 2
   titleY = -4
   shiftSpriteY = -24
else: // 384
   arrowX = 62
   arrowY = -7
   shiftX = -18
   shiftSpriteY = -24


let font = $font9
if SCREEN_SIZE.y <= 64: font = $font5
else if SCREEN_SIZE.y <= 180: font = $font8

let controlsFont = font
if SCREEN_SIZE.y <= 64: font = $font5
else if SCREEN_SIZE.y <= 180: controlsFont = $font6

let choiceFont = $font9
if SCREEN_SIZE.y <= 64 or SCREEN_SIZE.x <= 128: choiceFont = $font5
else if SCREEN_SIZE.y <= 180: choiceFont = $font8

// For layout
let scale = 100%
if SCREEN_SIZE.y <= 180:
    if SCREEN_SIZE.y <= 112:
        scale = 50%
    else:
        scale = 75%


const playerName = []
for p < 4: push(playerName, "P" + (p + 1) + ": ")


// The player to show controls for. Only used at 64x64
let activeIndex = nil

let oldBackground


enter(p)
────────────────────────────────────────────────────────────────────────
activeIndex = p
oldBackground = get_background()
set_clip(xy(0, 0), SCREEN_SIZE, -2047, 4096)


leave
────────────────────────────────────────────────────────────────────────
set_background(oldBackground)



frame
────────────────────────────────────────────────────────────────────────

set_background(window_background_color)

// "Press P when done"
if SCREEN_SIZE.x == 64:
   const text = joy.prompt["(p)"] + " when done"
   draw_text({font: controlsFont, text: text, pos: xy(SCREEN_SIZE.x / 2, SCREEN_SIZE.y - 4), color: #023, x_align: "center", y_align: "center", wrap_width: 60})
else:
   const text = "Press " + joy.prompt["(p)"] + " when done"
   const W = text_width(controlsFont, text)
   draw_line(xy(SCREEN_SIZE.x / 2 - 1, 0), xy(SCREEN_SIZE.x / 2 - 1, SCREEN_SIZE.y), #023)
   draw_line(xy(0, SCREEN_SIZE.y / 2), xy(SCREEN_SIZE.x / 2 - 55% W, SCREEN_SIZE.y / 2), #023)
   draw_line(xy(SCREEN_SIZE.x / 2 + 55% W, SCREEN_SIZE.y / 2), xy(SCREEN_SIZE.x, SCREEN_SIZE.y / 2), #023)
   draw_text({font: controlsFont, text: text, pos: SCREEN_SIZE / 2 + xy(0, 1), color: #023, outline: window_background_color, x_align: "center", y_align: "center"})

   
for p < 4:
   const control = gamepad_array[p]

   // Allow any controller to quit
   if control.$pp or control.qq:
      pop_mode() because "Pressed P or Q"


   // In 64x64 mode, skip the non-active players
   if activeIndex ≠ ∅ and p ≠ activeIndex: continue
   
   preserving_transform:
      if control.xx:
         let i = find(controllerTypeArray, control.type)
         let tryAgain = true
         let type
         while tryAgain:
            i = loop(i + control.xx, size(controllerTypeArray))
            type = controllerTypeArray[i]

            // Force to continue cycling if an illegal value was chosen for
            // this player
            tryAgain = ((p == 0 and type == "Kbd_P2") or
                        ((find(type, "Kbd_") ≠ ∅ or find(type, "Keyboard") ≠ ∅) and
                         ((p > 1) or
                          (p == 1 and (type ≠ "Kbd_P2")))))
         // Switch the device to the selected controller
         device_control("set_pad_type", p, type)

      if SCREEN_SIZE.x == 64:
         set_transform(xy(32, shiftY), xy(1, 1))
      else:
         set_transform(xy((0.5 + (p bitand 1)) * SCREEN_SIZE.x / 2,
                         (p bitshr 1) * SCREEN_SIZE.y / 2 + (26 + shiftY) * scale), xy(1, 1))

      draw_text({font: choiceFont, text: playerName[p] + control.type, shadow: text_shadow_color,
                pos: xy(0, titleY) * scale, color: text_color, x_align: "center"})

      draw_text({font: font, text: "⊲", pos: xy(-arrowX, arrowY) * scale + xy(0, 2), color: text_shadow_color, x_align: "center"})
      draw_text({font: font, text: "⊳", pos: xy(+arrowX, arrowY) * scale + xy(0, 2), color: text_shadow_color, x_align: "center"})
      draw_text({font: font, text: "⊲", pos: xy(-arrowX, arrowY) * scale, color: prompt_color, x_align: "center"})
      draw_text({font: font, text: "⊳", pos: xy(+arrowX, arrowY) * scale, color: prompt_color, x_align: "center"})

      draw_sprite({sprite: controllerSpritesheet[control.type], pos: xy(-offsetX / 2, 30 - shiftSpriteY) * scale})

      draw_text({font: controlsFont, text: control.prompt["ⓔ"], pos: xy(-44 + shiftX - offsetX, 10) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["ⓠ"], pos: xy(-44 + shiftX - offsetX, 26) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["⍐"], pos: xy(-44 + shiftX - offsetX, 44) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["⍈"], pos: xy(-28 + shiftX - offsetX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["⍇"], pos: xy(-60 + shiftX - offsetX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["⍗"], pos: xy(-44 + shiftX - offsetX, 80) * scale, color: #f, shadow: #023, x_align: "center"})

      draw_text({font: controlsFont, text: control.prompt["ⓕ"], pos: xy(+44 - shiftX, 10) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["ⓟ"], pos: xy(+44 - shiftX, 26) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["ⓓ"], pos: xy(+44 - shiftX, 44) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["ⓒ"], pos: xy(+28 - shiftX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["ⓑ"], pos: xy(+60 - shiftX, 61) * scale, color: #f, shadow: #023, x_align: "center"})
      draw_text({font: controlsFont, text: control.prompt["ⓐ"], pos: xy(+44 - shiftX, 80) * scale, color: #f, shadow: #023, x_align: "center"})


