/* By Morgan McGuire @CasualEffects https://casual-effects.com LGPL 3.0 License*/
"use strict";

/* Initialized at the bottom of this file */
let myHostNetID;
const NET_ID_PREFIX = 'qp000';

// 6x32, maximum 4-letter words chosen to fit the pattern (adjective,
// noun)x3 and with the constraint that each word is unique and 
// minimizes phoenetic similarity, for clear verbal communication of netIDs
const NET_ID_WORD_TABLE = [
    ['bent', 'blue', 'bold', 'cool', 'dim', 'dry', 'east', 'epic', 'far', 'fast', 'fell', 'fire', 'free', 'gray', 'hale', 'holy', 'hot', 'iron', 'kind', 'lake', 'last', 'left', 'next', 'old', 'rock', 'sea', 'tidy', 'tiny', 'used', 'wild', 'worn', 'zen'],
    ['band', 'bar', 'bell', 'bird', 'boar', 'boat', 'card', 'chin', 'crow', 'deer', 'desk', 'frog', 'gate', 'goat', 'hair', 'hand', 'hawk', 'home', 'hope', 'jack', 'jump', 'kiss', 'land', 'move', 'rope', 'ship', 'sun', 'taco', 'veil', 'wand', 'well', 'year'],
    ['able', 'calm', 'cold', 'dark', 'deep', 'evil', 'fair', 'felt', 'full', 'gilt', 'good', 'high', 'late', 'low', 'mini', 'near', 'nice', 'pale', 'past', 'pink', 'rare', 'raw', 'red', 'rich', 'rose', 'safe', 'slow', 'tall', 'thin', 'warm', 'weak', 'wet'],
    ['axe', 'bath', 'bear', 'bow', 'cane', 'cat', 'coin', 'day', 'dove', 'fish', 'flag', 'gem', 'hero', 'hill', 'inn', 'key', 'king', 'lion', 'moon', 'nail', 'oar', 'oven', 'plum', 'rail', 'sand', 'snow', 'song', 'star', 'tree', 'vine', 'wing', 'wolf'],
    ['apt', 'big', 'dull', 'dun', 'easy', 'fake', 'fine', 'fit', 'gold', 'half', 'hard', 'ice', 'long', 'lost', 'loud', 'my', 'new', 'odd', 'one', 'our', 'peak', 'poor', 'posh', 'real', 'soft', 'sour', 'tame', 'time', 'true', 'twin', 'west', 'your'],
    ['belt', 'boot', 'corn', 'crab', 'deer', 'door', 'eye', 'food', 'gift', 'gull', 'head', 'hen', 'isle', 'lady', 'life', 'line', 'lock', 'math', 'pear', 'pool', 'rain', 'road', 'root', 'ruin', 'sail', 'shoe', 'soul', 'town', 'turn', 'wind', 'wish', 'zero']];

/* 
   Generates an integer between 0 and 32^6-1 (about one billion) that
   is unlikely to be generated by a different computer running quadplay,
   and then converts to the netID string format.
*/
function generateNetID() {
    // Math.random() varies across platforms in its implementation,
    // and is initialized differently per instance (how reliably it is
    // initialized is unknown).
    //
    // performance.now returns a time from an arbitrary baseline in
    // milliseconds, with a fractional part. The accuracy of the
    // fractional part varies across platforms, but the time within a
    // second should generally be uniformly distributed.
    const MAX = 0x40000000;

    // Because the inputs have finite precision, multiplication and
    // modulo do not make the outputs uniformly distributed; there's a
    // little clumping but it should be fine for our purpose here.
    const A = Math.random();
    const B = (performance.now() % 1000) / 1000;
    return NET_ID_PREFIX + ('' + Math.min(MAX - 1, Math.floor(MAX * ((A + B) % 1)))).padStart(10, '0');
}


/* Returns an array of six words */
function netIDToWords(id) {

    id = parseInt(id.substring(NET_ID_PREFIX.length));
    let list = [];
    for (let word = 0; word < 6; ++word) {
        list.push(capitalize(NET_ID_WORD_TABLE[word][id & 31]));
        id >>= 5;
    }
    
    return list;
}


function netIDToSentence(netID) {
    const list = netIDToWords(netID);
    return list[0] + " " + list[1] + ", " + list[2] + " " + list[3] + ", " + list[4] + " " + list[5];
}


/** Returns a value comparable to generateNetID() */
function wordsToNetID(list) {
    let id = 0;
    for (let word = 5; word >= 0; --word) {
        id <<= 5;
        id |= NET_ID_WORD_TABLE[word].indexOf(list[word].toLowerCase());
    }
    
    return NET_ID_PREFIX + ('' + id).padStart(10, '0');
}


/* Call to replace myHostNetID and commit the new one to localStorage.
   Returns the new ID  */
function changeMyHostNetID() {
    myHostNetID = generateNetID();
    localStorage.setItem('myHostNetID', myHostNetID);
    return myHostNetID;
}

/* For use by the QRuntime */
function getMyHostNetID() {
    return myHostNetID;
}

function getIsHosting() {
    return isHosting;
}

function getIsOffline() {
    return true;//isOffline;
}

function startHosting() {
    // TODO
    isHosting = true;
}

function stopHosting() {
    // TODO
    isHosting = false
}

/* Is this machine currently hosting online play? */
let isHosting = false;
myHostNetID = localStorage.getItem('myHostNetID') || changeMyHostNetID();

