#!/bin/sh
# -*- python -*-
#
# This is the quadplay server script. The quadplay server is a stock web server with the following
# extensions:
#
#  - POST commands take a JSON argument with a `command` that is:
#    
#    "write_file":    Write the specified contents to disk at the specified location.
#                     Used by the IDE to save files.
#
#    "new_game":      Create a new game by copying and renaming the starter template
#                     and return the URL of the new game, or return an error if the
#                     directory already existed.
#
#    "open":          Open the specified file in finder/explorer or using an external
#                     application editor
#
#  - GET commands:
#
#    - Are limited to the quadplay directory, the directory passed on the
#      command line, and $HOME/my_game
# 
#    - The special quad_path + `/console/_assets.json` "file" gives a listing
#      of all assets in the specified directory and the quadplay built-in directories.
#
#    - The special quad_path + `/console/games.json` file gives a listing
#      of all games in subdirectories of examples/, games/, and my_quadplay/
#      (not recursive)
#
#    - The special quad_path + `/console/_quadserver.json` "file" describes
#      the available external applications, which are a subset of console/external-applications.json
#
# A "path" in this code is a file-system path, where '/' means the filesystem true root
#
# A "webpath" is a URL subpath, where '/' means the server root = filesystem root_path

# Shell commands follow.
# The next line is bilingual: it starts a comment in Python, and is a no-op in shell
""":"
# Find a suitable Python interpreter
for cmd in python3 python python2 ; do
   command -v > /dev/null $cmd && exec $cmd $0 "$@"
done

echo "The quadplay local script requires Python 3.7 or newer to be installed on your system." >2

exit 2

":"""
# Previous line is bilingual: it ends a comment in Python, and is a no-op in shell
# Shell commands end here
# Python script follows

import os, time, platform, sys, threading, socket, argparse, multiprocessing, json, ssl, codecs, glob, shutil, re, base64, random

# Import workjson, which is in the tools directory and we do not have
# an __init__.py file because we keep the main quadplay directory
# clean of dependencies.
sys.path.append(os.path.join(os.path.dirname(__file__), 'tools'))
import workjson

# Catch a common mistake. This binary file should be large if LFS is present:
if os.path.exists(os.path.join(os.path.dirname(__file__), '_dev')) and os.stat(os.path.join(os.path.dirname(__file__), 'console/xbox_controller.png')).st_size < 1000:
    print('You are running the development build of quadplay without git LFS, so the binary files are not present. Enable LFS and pull.')
    sys.exit(2)

# If needed, this is how we'd restrict the version. The current implementation does not need to restrict the version:
#if sys.version_info[0] < 3 or sys.version_info[1] < 7:
#    print('Sorry, you are using Python ' + sys.version + ' and quadplay requires Python 3.7 or newer. Download and install from https://python.org')
#    sys.exit(-1)

__doc__ = "Quadplay Fantasy Console launcher script."

version = str(sys.version_info.major) + '.' + str(sys.version_info.minor)

# Largest common prefix of quad_path and game_path. Root for web serving
server_root_path = None

# Magic path that the browser will use to communicate that it wants an asset listing
# or game listing for import in IDE mode
asset_query_webpath = None
game_query_webpath = None
config_query_webpath = None

# Subdirectories of server_root_path that are permitted for http access.
# These are relative to server_root_path and contain a leading slash because
# they are url subpaths relative to quad://
webpath_allowlist = None

isWindows = (platform.system() == 'Windows')
isMacOS = (platform.system() == 'Darwin')

# Authentication token, used to ensure that only browsers launched by this server can
# ask it to POST
token = None

# Ensure that slashes and case are consistent when on windows, and make absolute
def canonicalize_path(path): return os.path.normcase(os.path.abspath(path)).replace('\\', '/')

# Where the user's games are stored. Will be made relative to the CWD later
my_games_path = canonicalize_path(os.path.join(os.path.expanduser('~'), 'my_quadplay'))

def remove_leading_slash(path): return path[1:] if len(path) > 0 and path[0] == '/' else path
def remove_trailing_slash(path): return path[:-1] if len(path) > 0 and path[-1] == '/' else path

try:
    # Python 3.7+
    from http.server import ThreadingHTTPServer, SimpleHTTPRequestHandler
    QuadplayHTTPServer = ThreadingHTTPServer
    print('Initializing Quadplay server using Python ' + version + ' ThreadingHTTPServer')
    
except ImportError:
    try:
        # Python 3+
        from http.server import HTTPServer, SimpleHTTPRequestHandler
        print('Initializing Quadplay server using Python ' + version + ' HTTPServer')
        QuadplayHTTPServer = HTTPServer
    except ImportError:
        # Python 2
        from SimpleHTTPServer import SimpleHTTPRequestHandler
        import SocketServer
        QuadplayHTTPServer = SocketServer.TCPServer
        print('Initializing Quadplay server using Python ' + version + ' SocketServer.TCPServer')

        
def load_json(filename):
    with open(filename, 'rt', encoding='utf8') as f:
        return workjson.loads(f.read())
        
# Handles serving from multiple directories. Overrides the default restriction to
# the CWD with its own security allowlist.
#
# See https://github.com/python/cpython/blob/master/Lib/http/server.py for
# the base class implementation and internal methods
class QuadplayHTTPRequestHandler(SimpleHTTPRequestHandler):
    def list_directory(self, path):
        # Prevent directory listing
        self.send_error(404, 'No permission to list directory')
        return None

    # Returns False on security error
    def prepare_mutating_request(self):
        if args.host:
           print('Refused POST/DELETE command while running with --host')
           return False
        
        if self.client_address[0] != '127.0.0.1':
           print('Refused POST/DELETE command from non-local address', self.client_address[0])
           return False
       
        content_len = int(self.headers['Content-Length'])
        object = json.loads(self.rfile.read(content_len))

        request_token = object['token']
        if request_token != token:
            print('WARNING: Ignored request without proper token (expected ', token, '/ received ', request_token, ')')
            response = json.dumps('Bad token', separators = (',', ':'));
            self.send_response(401)
            self.send_header('Content-type', 'text/json')
            self.send_header('Content-length', len(response))
            self.end_headers()
            self.wfile.write(response.encode('utf8'))
            return False

        return object
    
    
    def do_DELETE(self):
        object = self.prepare_mutating_request()
        if not object: return
        path_parts = self.path.split('?')
        webpath = os.path.normpath(path_parts[0]).replace('\\', '/')
        print('DELETE ' + webpath)

        os.remove(webpath)
        
        response = json.dumps('OK', separators = (',', ':'));
        self.send_response(200)
        self.send_header('Content-type', 'text/json')
        self.send_header('Content-length', len(response))
        self.end_headers()
        self.wfile.write(response.encode('utf8'))
        
    
    # Used for the IDE to write files. Currently disabled on the IDE side
    def do_POST(self):
        #print('\n\nReceived POST from ', self.client_address[0], '\n\n')

        object = self.prepare_mutating_request()
        if not object: return

        command = object['command']
        
        response_obj = None
        code = 201
        if command == 'write_file':
            filename = remove_leading_slash(object['filename'])
            encoding = object['encoding']
            contents = object['contents']
            if not re.search(re.compile(r'\.(json|pyxl|png|html|txt|md|tmx|mp3)$'), filename):
                print('Wrote', encoding, 'file', filename)
                print('WARNING: Ignored request to write illegal file', filename)
                response_obj = 'Illegal'
                code = 401
            else:
                if encoding == 'binary':
                    # Contents is base64 encoded for the JSON transmission.
                    # Convert back to bytes
                    contents = base64.standard_b64decode(contents)
                    with open(filename, 'wb') as f: f.write(contents)
                else:
                    with codecs.open(filename, 'w', encoding) as f: f.write(contents)
                print('Wrote', encoding, 'file', filename)
                response_obj = 'OK'
            
        elif command == 'open':
            app = object['app']
            filename = '"' + object['file'] + '"'
            cmd = ''            
            if app == '<finder>':
                if isMacOS:
                    cmd = 'open -R "' + filename + '"'
                else:
                    cmd = 'start "' + os.path.dirname(filename) + '"'
            elif isMacOS:
                cmd = 'open -a "' + app + '" "' + filename + '"'
                
            os.system(cmd)
            response_obj = 'OK'
            
        elif command == 'new_game':
            dir_name = object['dir_name']
            game_name = object['game_name']

            dst_path = my_games_path + '/' + dir_name
            starter_path = os.path.join(quad_path, 'examples/starter')
            
            print('Created game', dir_name, 'at', dst_path)
            
            # Copy and rename files
            if os.path.exists(dst_path):
                code = 406
                response_obj = {'message': dst_path + ' already exists'}
            else:
                os.makedirs(dst_path)

                # Parse the starter game
                game_json = load_json(os.path.join(starter_path + '/starter.game.json'))

                # Change the title
                game_json['title'] = game_name

                # Save the new game
                with open(os.path.join(dst_path, dir_name + '.game.json'), 'wt', encoding='utf8') as f:
                    f.write(workjson.dumps(game_json, indent=4))
                
                for filename in ['label64.png', 'label128.png', 'Play.pyxl', 'TODO.md']:
                    shutil.copyfile(os.path.join(starter_path, filename), os.path.join(dst_path, filename))

                response_obj = {'game': '/' + dst_path + '/'}

        response = json.dumps(response_obj, separators = (',', ':'));
        self.send_response(code)
        self.send_header('Content-type', 'text/json')
        self.send_header('Content-length', len(response))
        self.end_headers()
        self.wfile.write(response.encode('utf8'))

              
    def do_GET(self):
        # Remove the query and collapse any ..
        path_parts = self.path.split('?')
        webpath = os.path.normpath(path_parts[0]).replace('\\', '/')
        query = path_parts[1] if len(path_parts) > 1 else ''
        if isWindows and len(webpath) > 3 and webpath[2] == ':' and webpath[0] == '/':
            # On Windows, remove a leading slash if there is a drive letter
            webpath = webpath[1:]
            self.path = self.path[1:]

        # Security: Check if path has a prefix in webpath_allowlist
        if webpath != '/favicon.ico' and not any([webpath.startswith(prefix) for prefix in webpath_allowlist]):
            self.send_error(404, 'Illegal webpath: ' + webpath)

        if webpath == config_query_webpath or webpath == asset_query_webpath or webpath == game_query_webpath:
            response_obj = {}
            if webpath == config_query_webpath:
                if not args.kiosk:
                    response_obj['IDE_USER'] = os.environ['USERNAME' if isWindows else 'USER']
                response_obj['rootPath'] = server_root_path
                response_obj['hasFinder'] = isWindows or isMacOS

                if isWindows or isMacOS:
                    applications = []
                    response_obj['applications'] = applications
                    potential_applications = load_json(os.path.join(quad_path, 'console/external-applications.json'))['Windows' if isWindows else 'macOS']
                    for app in potential_applications:
                        for path in app['paths']:
                            path = os.path.expandvars(os.path.expanduser(path))
                            if os.path.exists(path):
                                # Found this app
                                applications.append({'name': app['name'], 'path': path, 'types': app['types']})
                                break
                            
                    
            elif webpath == asset_query_webpath:
                print('query', query)
                aux_path = query[query.index('=') + 1:]

                # Security: check if aux_path has a prefix in webpath_allowlist
                if not any([aux_path.startswith(prefix) for prefix in webpath_allowlist]):
                    self.send_error(404, 'Illegal path: ' + aux_path)
                
                # Raw files to exclude because they are already in use. Exclude
                # the files from quadplay's own metadata automatically.
                exclude_table = {}
                for f in ['label64.png', 'label128.png', 'preview.png']:
                    exclude_table[remove_leading_slash(aux_path) + f] = True

                # Search (quad_path | aux_path) + type + 's/*.' + type + '.json'
                asset_type_array = ['font', 'sprite', 'sound', 'map']
                for t in asset_type_array:
                    # Get the json files from the game directory
                    response_obj[t] = glob.glob(remove_leading_slash(aux_path + '**/*.' + t + '.json'), recursive=True)

                    # Look in each of the files for the URLs of raw files to exclude
                    for file in response_obj[t]:
                        tmp = load_json(file)
                        if 'url' in tmp: exclude_table[remove_leading_slash(aux_path) + tmp['url']] = True

                raw_extension = {'sprite': 'png', 'font': 'png', 'sound': 'mp3', 'map':'tmx'}
                special_dir_regex = re.compile('(^|/)(journal|screenshots|metadata|backlot|graveyard)/', re.IGNORECASE)

                for t in asset_type_array:
                    # Get raw files
                    raw_files = glob.glob(remove_leading_slash(aux_path + '**/*.' + raw_extension[t]), recursive=True)

                    # Remove from raw_files anything that is in exclude_table
                    raw_files = [f for f in raw_files if not f in exclude_table]
                    
                    # Sort all files from the game directory
                    response_obj[t] = sorted(response_obj[t] + raw_files)

                    # Remove anything in a magic directory
                    response_obj[t] = [f for f in response_obj[t] if not special_dir_regex.search(f)]

                    # Get the json files from the quadplay directory,
                    # sort, and append them to the list
                    response_obj[t] += ['quad://' + f[len(quad_path):] for f in sorted(glob.glob(quad_path + t + 's/*.' + t + '.json'))]
                    
                    # Fix slashes on windows
                    if isWindows: response_obj[t] = [f.replace('\\', '/') for f in response_obj[t]]

            else: # game list query
                
                redundant_pattern = re.compile(r'(?P<name>/[^/]+)(?P=name)\.game\.json$')
                set = {'examples' : quad_path + 'examples',
                       'builtins' : quad_path + 'games',
                       'mine'     : my_games_path}

                # For alpha testers and internal development
                if os.path.exists(quad_path + '_alpha'):
                    set['alpha'] = quad_path + '_alpha'
                    set['tests'] = quad_path + '_tests'
                    
                for key, path in set.items():
                    # Do not change case on Windows (because this will be part of the json file that is read
                    # on multiple platforms) but *do* fix slashes
                    list = [{'url': path.replace('\\', '/'), 'title': 'TBD'} for path in sorted(glob.glob(path + '/**/*.game.json', recursive=True))]
                    for entry in list:
                        path = entry['url']

                        if key == 'mine':
                            # Make relative to the web root
                            entry['url'] = '/' + entry['url']
                        else:
                            # Shorten built-ins to quad://
                            entry['url'] = 'quad://' + path[len(quad_path):]

                        # Shorten games with redundant names to just the directory
                        entry['url'] = redundant_pattern.sub(r'\1/', entry['url'])
                        # Fetch the titles
                        with open(path, 'rt', encoding='utf8') as f:
                            game = workjson.loads(f.read())
                            entry['description'] = game['description'] if 'description' in game else ''
                            entry['title'] = game['title']

                    response_obj[key] = list

            response = json.dumps(response_obj, separators = (',', ':'));
            self.send_response(200)
            self.send_header('Content-type', 'text/json')
            self.send_header('Content-length', len(response))
            self.end_headers()
            self.wfile.write(response.encode('utf8'))
        else:
            f = self.send_head()
            if f:
               try:
                   self.copyfile(f, self.wfile)
               except BrokenPipeError:
                   print('Broken pipe while loading', webpath)
               finally:
                   f.close()

                   
    def log_request(self, code = '-', size = '-'):
        # Overridden to not show all requests
        #self.log_message('"%s" %s %s', self.requestline, str(code), str(size))
        pass

    
    def log_error(self, format, *args):
        # Overridden to allow a debugging point
        self.log_message(format, *args)

        
    def translate_path(self, path):
        if path == '/favicon.ico':
            # Browsers sometimes ask for this. Send them to the quadplay
            # directory instead
            return quad_path + '/console/favicon.ico'

        elif isWindows and server_root_path == '':
            # Need the whole path, since the "cwd" is wrong
            return self.path.split('?')[0]
        else:
            # Intentionally use Python 2 super syntax for potential
            # backward compatibility
            result = SimpleHTTPRequestHandler.translate_path(self, path)
            return result
     

def parse_args():
    """ parse arguments out of sys.argv """
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument(
        '--host',
        action='store_true',
        default=False,
        help='hosting mode - allow other machines to connect to this one to play on mobile devices'
    )
    
    parser.add_argument(
        'gamepath',
        type=str,
        default='',
        nargs='?',
        help=(
            'Game to load.  If not specified, loads default loader scene.'
            ' Example: examples/accel_demo'
        )
    )
    
    parser.add_argument(
        '--kiosk',
        action='store_true',
        default=False,
        help='kiosk mode - launch full screen and without the IDE'
    )
    
    parser.add_argument(
        "-p",
        "--port",
        type=int,
        default=8000,
        help="Port to run the server on."
    )

    return parser.parse_args()

# Args must be initialized to a constant before launchServer is defined
# because of the way that multiprocess serialization works on ThreadingHTTPServer
args = parse_args()
if isWindows and args.gamepath:
    # Make drive letters canonical
    if args.gamepath[1] == ':':
        args.gamepath = args.gamepath[0].upper() + args.gamepath[1:]

        
# Makes a path relative to the server_root_path, and thus "absolute"
# for the web server root (not for the filesystem)
def platform_www_abspath(p):
    if isWindows:
        p = p[len(server_root_path):]
        if not p.endswith('.game.json'): p = os.path.join(p, '')
        t = os.path.normcase(p).replace('\\', '/')
        if len(t) > 1 and t[1] != ':' and t[0] != '/': t = '/' + t
        return t
    else:
        if server_root_path != '/':
            p = p[len(server_root_path)+1:]
            
        if p == '':
            return ''
        elif p.endswith('.game.json'):
            return os.path.join('/', p)            
        else:
            return os.path.join('/', p, '')

    
# Process paths at top level so that they can be inherited by ThreadingHTTPServer
quad_path = canonicalize_path(os.path.dirname(__file__))

# Compute the serving paths
game_path = canonicalize_path(args.gamepath)
if game_path.endswith('.game.json'): game_path = os.path.dirname(game_path)
webpath_allowlist = [quad_path, game_path]

if not args.kiosk: webpath_allowlist.append(my_games_path)
       
# Common ancestor
server_root_path = os.path.dirname(os.path.commonprefix([os.path.join(p, '') for p in webpath_allowlist]))

# Strip the common prefix
# HERE
webpath_allowlist = [platform_www_abspath(p) for p in webpath_allowlist]
my_games_path = remove_leading_slash(my_games_path[len(server_root_path):])

# Remove trailing slash
asset_query_webpath = webpath_allowlist[0]
if len(asset_query_webpath) > 0 and asset_query_webpath[-1] == '/': asset_query_webpath = asset_query_webpath[:-1]
game_query_webpath = asset_query_webpath + '/console/games.json'
config_query_webpath = asset_query_webpath + '/console/_config.json'
asset_query_webpath += '/console/_assets.json'
quad_path = remove_leading_slash(webpath_allowlist[0])

if False:
    # Debug paths
    print("\nserver_root_path   = '" + server_root_path + "'")
    print("quad_path            = '" + quad_path + "'")
    print("my_games_path        = '" + my_games_path + "'")
    print("asset_query_webpath  = '" + asset_query_webpath + "'")
    print("game_query_webpath   = '" + game_query_webpath + "'")
    print("config_query_webpath = '" + config_query_webpath + "'")
    print('webpath_allowlist    = ', webpath_allowlist, '\n')
    sys.exit()
# SSL support doesn't work yet due to self-signed certificates
useSSL = False

# Runs in a different process
def launchServer(post_token):
    global httpd, args, server_root_path, token

    # Assign back to the global token. We have to do this because
    # Python reinitializes all globals
    token = post_token
    
    # Serve from the common directory, unless the common directory
    # is the filesystem root and we're on windows where that cannot
    # be the cwd
    old_path = os.getcwd()
    if not isWindows or server_root_path != '':
        os.chdir(server_root_path)
    
    try:
        # '' = 0.0.0.0 = all local IP addresses, needed for
        # supporting devices other than just localhost
        server_address = ('' if args.host else 'localhost', args.port)
        httpd = QuadplayHTTPServer(server_address, QuadplayHTTPRequestHandler)

        if useSSL:
            httpd.socket = ssl.wrap_socket(httpd.socket, 
                                           keyfile='console/ssl/local-key.pem', 
                                           certfile='console/ssl/local-cert.pem',
                                           do_handshake_on_connect=False,
                                           server_side=True)
        httpd.serve_forever()
    except OSError as e:
        print(e)
        print('Not starting a local server, since one is already running.');
        
    os.chdir(old_path)

        
def main():
    global webpath_allowlist, server_root_path, token

    token = "%0.7X" % random.randrange(0, 0x10000000)

    try:
       import msvcrt
    except ImportError:
       import termios, atexit, select
       stdinFd = sys.stdin.fileno()
       new_term = termios.tcgetattr(stdinFd)
       old_term = termios.tcgetattr(stdinFd)
       def set_normal_term():
           termios.tcsetattr(stdinFd, termios.TCSAFLUSH, old_term)

       # New terminal setting unbuffered
       new_term[3] = (new_term[3] & ~termios.ICANON & ~termios.ECHO)
       termios.tcsetattr(stdinFd, termios.TCSAFLUSH, new_term)

       # Support normal-terminal reset at exit
       atexit.register(set_normal_term)

    myip = '127.0.0.1'
    if args.host:
        try:
            print('Getting IP address...')
            myip = ''

            # just try this first on mac because the other approaches fail so frequently
            if isMacOS:
               myip = (os.popen('ipconfig getifaddr en0').read().strip() or
                       os.popen('ipconfig getifaddr en1').read().strip())
            if not myip: myip = socket.gethostbyname(socket.gethostname())
        except:
            if isMacOS:
                # The above can fail apparently randomly on MacOS (https://bugs.python.org/issue35164)
                # and that has happened to us. This is a workaround:
                print('gethostbyname failed due to a known MacOS internal error. Falling back to\nipconfig...')
                
                myip = os.popen('ipconfig getifaddr en0').read().strip()
                if not myip:
                   print('Could not find en0. Looking for en1...')
                   myip = os.popen('ipconfig getifaddr en1').read().strip()
                
                if not myip:
                    print('WARNING: ipconfig could not find a valid en0 or en1 adapter. Server IP address is unknown.')
                    myip = '127.0.0.1'
                else:
                    print('WARNING: gethostbyname unexpectedly failed. Server IP address is unknown.')
                    myip = '127.0.0.1'

    url = 'http' + ('s' if useSSL else '')+ '://' + myip + ':' + str(args.port)
    if not quad_path or quad_path[0] != '/': url += '/'
    url += os.path.join(quad_path, 'console/quadplay.html?fastReload=1&token=' + token)

    if args.kiosk:
        url += '&mode=Maximal&kiosk=1'
    else: 
        url += '&IDE=1'
        
    print('_________________________________________________________________________\n')

    if args.gamepath != '':
        t = args.gamepath
        if not t.startswith('http://') and not t.startswith('quad://'):
            t = platform_www_abspath(os.path.abspath(t))
            if t and not isWindows and t[0] != '/': t = '/' + t
        url += '&game=' + t
    else:
        print('Loading default launcher game. You can supply the URL or local relative path to your game on\nthe command line, for example "quadplay foo/mygame", to load it directly.\n')

    print('\nServing from:\n\n   ' + url + '\n')
                 
    if args.host:
        # Do not support POST in host mode
        print('\nYour firewall may need to be configured to load on other devices.\n')
    else:
        url += '&quadserver=1'
    
    # Run from the quadplay path
    print('   quad://  = ' + os.path.join(server_root_path, quad_path))
    print('   My games = ' + os.path.join(server_root_path, my_games_path) + '/')
    print('   cwd      = ' + remove_trailing_slash(server_root_path) + '/\n')
    

    # Platform independent keyboard key press detection
    def kbhit():
       if isWindows:
          return msvcrt.kbhit()
       else:
          dr, dw, de = select.select([sys.stdin], [], [], 0)
          return dr != []

    httpd = 0

    serverThread = multiprocessing.Process(target=launchServer, args=[token])
    print('Starting local server thread...')
    serverThread.start()
    print('\n**Press any key to terminate the server when done**\n')
    time.sleep(2)

    if isWindows:
        # Require NO surrounding quotes on Windows for it to interpret the URL.
        # Must escape & as ^&.
        os.system('start ' + url.replace('&', '^&'))
    elif isMacOS:
        # Require quotes on Unix systems so that bash does not interpret &
        # as a shell option to run in another thread
        os.system('open "' + url + '"')
    else:
        os.system('xdg-open "' + url + '"')

    while not kbhit():
        time.sleep(0.25)

    print('\nShutting down...')

    # Attempt to gracefully shut down
    if httpd: threading.Thread(target=lambda : httpd.shutdown())
    time.sleep(1)
    serverThread.terminate()

    return 0

if __name__ == "__main__":
    sys.exit(main())
